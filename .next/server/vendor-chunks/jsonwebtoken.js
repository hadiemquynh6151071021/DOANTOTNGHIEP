"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsonwebtoken";
exports.ids = ["vendor-chunks/jsonwebtoken"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsonwebtoken/decode.js":
/*!*********************************************!*\
  !*** ./node_modules/jsonwebtoken/decode.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar jws = __webpack_require__(/*! jws */ \"(ssr)/./node_modules/jws/index.js\");\nmodule.exports = function(jwt, options) {\n    options = options || {};\n    var decoded = jws.decode(jwt, options);\n    if (!decoded) {\n        return null;\n    }\n    var payload = decoded.payload;\n    //try parse the payload\n    if (typeof payload === \"string\") {\n        try {\n            var obj = JSON.parse(payload);\n            if (obj !== null && typeof obj === \"object\") {\n                payload = obj;\n            }\n        } catch (e) {}\n    }\n    //return header if `complete` option is enabled.  header includes claims\n    //such as `kid` and `alg` used to select the key within a JWKS needed to\n    //verify the signature\n    if (options.complete === true) {\n        return {\n            header: decoded.header,\n            payload: payload,\n            signature: decoded.signature\n        };\n    }\n    return payload;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL2RlY29kZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsTUFBTUMsbUJBQU9BLENBQUM7QUFFbEJDLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxHQUFHLEVBQUVDLE9BQU87SUFDckNBLFVBQVVBLFdBQVcsQ0FBQztJQUN0QixJQUFJQyxVQUFVTixJQUFJTyxNQUFNLENBQUNILEtBQUtDO0lBQzlCLElBQUksQ0FBQ0MsU0FBUztRQUFFLE9BQU87SUFBTTtJQUM3QixJQUFJRSxVQUFVRixRQUFRRSxPQUFPO0lBRTdCLHVCQUF1QjtJQUN2QixJQUFHLE9BQU9BLFlBQVksVUFBVTtRQUM5QixJQUFJO1lBQ0YsSUFBSUMsTUFBTUMsS0FBS0MsS0FBSyxDQUFDSDtZQUNyQixJQUFHQyxRQUFRLFFBQVEsT0FBT0EsUUFBUSxVQUFVO2dCQUMxQ0QsVUFBVUM7WUFDWjtRQUNGLEVBQUUsT0FBT0csR0FBRyxDQUFFO0lBQ2hCO0lBRUEsd0VBQXdFO0lBQ3hFLHdFQUF3RTtJQUN4RSxzQkFBc0I7SUFDdEIsSUFBSVAsUUFBUVEsUUFBUSxLQUFLLE1BQU07UUFDN0IsT0FBTztZQUNMQyxRQUFRUixRQUFRUSxNQUFNO1lBQ3RCTixTQUFTQTtZQUNUTyxXQUFXVCxRQUFRUyxTQUFTO1FBQzlCO0lBQ0Y7SUFDQSxPQUFPUDtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29uc3RydWN0aW9uLW1hbmFnZW1lbnQtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2pzb253ZWJ0b2tlbi9kZWNvZGUuanM/MDVmZCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgandzID0gcmVxdWlyZSgnandzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGp3dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIGRlY29kZWQgPSBqd3MuZGVjb2RlKGp3dCwgb3B0aW9ucyk7XG4gIGlmICghZGVjb2RlZCkgeyByZXR1cm4gbnVsbDsgfVxuICB2YXIgcGF5bG9hZCA9IGRlY29kZWQucGF5bG9hZDtcblxuICAvL3RyeSBwYXJzZSB0aGUgcGF5bG9hZFxuICBpZih0eXBlb2YgcGF5bG9hZCA9PT0gJ3N0cmluZycpIHtcbiAgICB0cnkge1xuICAgICAgdmFyIG9iaiA9IEpTT04ucGFyc2UocGF5bG9hZCk7XG4gICAgICBpZihvYmogIT09IG51bGwgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcGF5bG9hZCA9IG9iajtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgfVxuXG4gIC8vcmV0dXJuIGhlYWRlciBpZiBgY29tcGxldGVgIG9wdGlvbiBpcyBlbmFibGVkLiAgaGVhZGVyIGluY2x1ZGVzIGNsYWltc1xuICAvL3N1Y2ggYXMgYGtpZGAgYW5kIGBhbGdgIHVzZWQgdG8gc2VsZWN0IHRoZSBrZXkgd2l0aGluIGEgSldLUyBuZWVkZWQgdG9cbiAgLy92ZXJpZnkgdGhlIHNpZ25hdHVyZVxuICBpZiAob3B0aW9ucy5jb21wbGV0ZSA9PT0gdHJ1ZSkge1xuICAgIHJldHVybiB7XG4gICAgICBoZWFkZXI6IGRlY29kZWQuaGVhZGVyLFxuICAgICAgcGF5bG9hZDogcGF5bG9hZCxcbiAgICAgIHNpZ25hdHVyZTogZGVjb2RlZC5zaWduYXR1cmVcbiAgICB9O1xuICB9XG4gIHJldHVybiBwYXlsb2FkO1xufTtcbiJdLCJuYW1lcyI6WyJqd3MiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImp3dCIsIm9wdGlvbnMiLCJkZWNvZGVkIiwiZGVjb2RlIiwicGF5bG9hZCIsIm9iaiIsIkpTT04iLCJwYXJzZSIsImUiLCJjb21wbGV0ZSIsImhlYWRlciIsInNpZ25hdHVyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/decode.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonwebtoken/index.js":
/*!********************************************!*\
  !*** ./node_modules/jsonwebtoken/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = {\n    decode: __webpack_require__(/*! ./decode */ \"(ssr)/./node_modules/jsonwebtoken/decode.js\"),\n    verify: __webpack_require__(/*! ./verify */ \"(ssr)/./node_modules/jsonwebtoken/verify.js\"),\n    sign: __webpack_require__(/*! ./sign */ \"(ssr)/./node_modules/jsonwebtoken/sign.js\"),\n    JsonWebTokenError: __webpack_require__(/*! ./lib/JsonWebTokenError */ \"(ssr)/./node_modules/jsonwebtoken/lib/JsonWebTokenError.js\"),\n    NotBeforeError: __webpack_require__(/*! ./lib/NotBeforeError */ \"(ssr)/./node_modules/jsonwebtoken/lib/NotBeforeError.js\"),\n    TokenExpiredError: __webpack_require__(/*! ./lib/TokenExpiredError */ \"(ssr)/./node_modules/jsonwebtoken/lib/TokenExpiredError.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7QUFBQUEsT0FBT0MsT0FBTyxHQUFHO0lBQ2ZDLFFBQVFDLG1CQUFPQSxDQUFDO0lBQ2hCQyxRQUFRRCxtQkFBT0EsQ0FBQztJQUNoQkUsTUFBTUYsbUJBQU9BLENBQUM7SUFDZEcsbUJBQW1CSCxtQkFBT0EsQ0FBQztJQUMzQkksZ0JBQWdCSixtQkFBT0EsQ0FBQztJQUN4QkssbUJBQW1CTCxtQkFBT0EsQ0FBQztBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnN0cnVjdGlvbi1tYW5hZ2VtZW50LW5leHRqcy8uL25vZGVfbW9kdWxlcy9qc29ud2VidG9rZW4vaW5kZXguanM/OWJlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgZGVjb2RlOiByZXF1aXJlKCcuL2RlY29kZScpLFxuICB2ZXJpZnk6IHJlcXVpcmUoJy4vdmVyaWZ5JyksXG4gIHNpZ246IHJlcXVpcmUoJy4vc2lnbicpLFxuICBKc29uV2ViVG9rZW5FcnJvcjogcmVxdWlyZSgnLi9saWIvSnNvbldlYlRva2VuRXJyb3InKSxcbiAgTm90QmVmb3JlRXJyb3I6IHJlcXVpcmUoJy4vbGliL05vdEJlZm9yZUVycm9yJyksXG4gIFRva2VuRXhwaXJlZEVycm9yOiByZXF1aXJlKCcuL2xpYi9Ub2tlbkV4cGlyZWRFcnJvcicpLFxufTtcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwiZGVjb2RlIiwicmVxdWlyZSIsInZlcmlmeSIsInNpZ24iLCJKc29uV2ViVG9rZW5FcnJvciIsIk5vdEJlZm9yZUVycm9yIiwiVG9rZW5FeHBpcmVkRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonwebtoken/lib/JsonWebTokenError.js":
/*!************************************************************!*\
  !*** ./node_modules/jsonwebtoken/lib/JsonWebTokenError.js ***!
  \************************************************************/
/***/ ((module) => {

eval("\nvar JsonWebTokenError = function(message, error) {\n    Error.call(this, message);\n    if (Error.captureStackTrace) {\n        Error.captureStackTrace(this, this.constructor);\n    }\n    this.name = \"JsonWebTokenError\";\n    this.message = message;\n    if (error) this.inner = error;\n};\nJsonWebTokenError.prototype = Object.create(Error.prototype);\nJsonWebTokenError.prototype.constructor = JsonWebTokenError;\nmodule.exports = JsonWebTokenError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL2xpYi9Kc29uV2ViVG9rZW5FcnJvci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsb0JBQW9CLFNBQVVDLE9BQU8sRUFBRUMsS0FBSztJQUM5Q0MsTUFBTUMsSUFBSSxDQUFDLElBQUksRUFBRUg7SUFDakIsSUFBR0UsTUFBTUUsaUJBQWlCLEVBQUU7UUFDMUJGLE1BQU1FLGlCQUFpQixDQUFDLElBQUksRUFBRSxJQUFJLENBQUNDLFdBQVc7SUFDaEQ7SUFDQSxJQUFJLENBQUNDLElBQUksR0FBRztJQUNaLElBQUksQ0FBQ04sT0FBTyxHQUFHQTtJQUNmLElBQUlDLE9BQU8sSUFBSSxDQUFDTSxLQUFLLEdBQUdOO0FBQzFCO0FBRUFGLGtCQUFrQlMsU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNSLE1BQU1NLFNBQVM7QUFDM0RULGtCQUFrQlMsU0FBUyxDQUFDSCxXQUFXLEdBQUdOO0FBRTFDWSxPQUFPQyxPQUFPLEdBQUdiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29uc3RydWN0aW9uLW1hbmFnZW1lbnQtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2pzb253ZWJ0b2tlbi9saWIvSnNvbldlYlRva2VuRXJyb3IuanM/MTZmMiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgSnNvbldlYlRva2VuRXJyb3IgPSBmdW5jdGlvbiAobWVzc2FnZSwgZXJyb3IpIHtcbiAgRXJyb3IuY2FsbCh0aGlzLCBtZXNzYWdlKTtcbiAgaWYoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCB0aGlzLmNvbnN0cnVjdG9yKTtcbiAgfVxuICB0aGlzLm5hbWUgPSAnSnNvbldlYlRva2VuRXJyb3InO1xuICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICBpZiAoZXJyb3IpIHRoaXMuaW5uZXIgPSBlcnJvcjtcbn07XG5cbkpzb25XZWJUb2tlbkVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbkpzb25XZWJUb2tlbkVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEpzb25XZWJUb2tlbkVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEpzb25XZWJUb2tlbkVycm9yO1xuIl0sIm5hbWVzIjpbIkpzb25XZWJUb2tlbkVycm9yIiwibWVzc2FnZSIsImVycm9yIiwiRXJyb3IiLCJjYWxsIiwiY2FwdHVyZVN0YWNrVHJhY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJpbm5lciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/lib/JsonWebTokenError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonwebtoken/lib/NotBeforeError.js":
/*!*********************************************************!*\
  !*** ./node_modules/jsonwebtoken/lib/NotBeforeError.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar JsonWebTokenError = __webpack_require__(/*! ./JsonWebTokenError */ \"(ssr)/./node_modules/jsonwebtoken/lib/JsonWebTokenError.js\");\nvar NotBeforeError = function(message, date) {\n    JsonWebTokenError.call(this, message);\n    this.name = \"NotBeforeError\";\n    this.date = date;\n};\nNotBeforeError.prototype = Object.create(JsonWebTokenError.prototype);\nNotBeforeError.prototype.constructor = NotBeforeError;\nmodule.exports = NotBeforeError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL2xpYi9Ob3RCZWZvcmVFcnJvci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsb0JBQW9CQyxtQkFBT0EsQ0FBQztBQUVoQyxJQUFJQyxpQkFBaUIsU0FBVUMsT0FBTyxFQUFFQyxJQUFJO0lBQzFDSixrQkFBa0JLLElBQUksQ0FBQyxJQUFJLEVBQUVGO0lBQzdCLElBQUksQ0FBQ0csSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDRixJQUFJLEdBQUdBO0FBQ2Q7QUFFQUYsZUFBZUssU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNULGtCQUFrQk8sU0FBUztBQUVwRUwsZUFBZUssU0FBUyxDQUFDRyxXQUFXLEdBQUdSO0FBRXZDUyxPQUFPQyxPQUFPLEdBQUdWIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29uc3RydWN0aW9uLW1hbmFnZW1lbnQtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2pzb253ZWJ0b2tlbi9saWIvTm90QmVmb3JlRXJyb3IuanM/ODY2OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgSnNvbldlYlRva2VuRXJyb3IgPSByZXF1aXJlKCcuL0pzb25XZWJUb2tlbkVycm9yJyk7XG5cbnZhciBOb3RCZWZvcmVFcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBkYXRlKSB7XG4gIEpzb25XZWJUb2tlbkVycm9yLmNhbGwodGhpcywgbWVzc2FnZSk7XG4gIHRoaXMubmFtZSA9ICdOb3RCZWZvcmVFcnJvcic7XG4gIHRoaXMuZGF0ZSA9IGRhdGU7XG59O1xuXG5Ob3RCZWZvcmVFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEpzb25XZWJUb2tlbkVycm9yLnByb3RvdHlwZSk7XG5cbk5vdEJlZm9yZUVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IE5vdEJlZm9yZUVycm9yO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5vdEJlZm9yZUVycm9yOyJdLCJuYW1lcyI6WyJKc29uV2ViVG9rZW5FcnJvciIsInJlcXVpcmUiLCJOb3RCZWZvcmVFcnJvciIsIm1lc3NhZ2UiLCJkYXRlIiwiY2FsbCIsIm5hbWUiLCJwcm90b3R5cGUiLCJPYmplY3QiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/lib/NotBeforeError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonwebtoken/lib/TokenExpiredError.js":
/*!************************************************************!*\
  !*** ./node_modules/jsonwebtoken/lib/TokenExpiredError.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar JsonWebTokenError = __webpack_require__(/*! ./JsonWebTokenError */ \"(ssr)/./node_modules/jsonwebtoken/lib/JsonWebTokenError.js\");\nvar TokenExpiredError = function(message, expiredAt) {\n    JsonWebTokenError.call(this, message);\n    this.name = \"TokenExpiredError\";\n    this.expiredAt = expiredAt;\n};\nTokenExpiredError.prototype = Object.create(JsonWebTokenError.prototype);\nTokenExpiredError.prototype.constructor = TokenExpiredError;\nmodule.exports = TokenExpiredError;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL2xpYi9Ub2tlbkV4cGlyZWRFcnJvci5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsb0JBQW9CQyxtQkFBT0EsQ0FBQztBQUVoQyxJQUFJQyxvQkFBb0IsU0FBVUMsT0FBTyxFQUFFQyxTQUFTO0lBQ2xESixrQkFBa0JLLElBQUksQ0FBQyxJQUFJLEVBQUVGO0lBQzdCLElBQUksQ0FBQ0csSUFBSSxHQUFHO0lBQ1osSUFBSSxDQUFDRixTQUFTLEdBQUdBO0FBQ25CO0FBRUFGLGtCQUFrQkssU0FBUyxHQUFHQyxPQUFPQyxNQUFNLENBQUNULGtCQUFrQk8sU0FBUztBQUV2RUwsa0JBQWtCSyxTQUFTLENBQUNHLFdBQVcsR0FBR1I7QUFFMUNTLE9BQU9DLE9BQU8sR0FBR1YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb25zdHJ1Y3Rpb24tbWFuYWdlbWVudC1uZXh0anMvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL2xpYi9Ub2tlbkV4cGlyZWRFcnJvci5qcz85MGVjIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBKc29uV2ViVG9rZW5FcnJvciA9IHJlcXVpcmUoJy4vSnNvbldlYlRva2VuRXJyb3InKTtcblxudmFyIFRva2VuRXhwaXJlZEVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGV4cGlyZWRBdCkge1xuICBKc29uV2ViVG9rZW5FcnJvci5jYWxsKHRoaXMsIG1lc3NhZ2UpO1xuICB0aGlzLm5hbWUgPSAnVG9rZW5FeHBpcmVkRXJyb3InO1xuICB0aGlzLmV4cGlyZWRBdCA9IGV4cGlyZWRBdDtcbn07XG5cblRva2VuRXhwaXJlZEVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSnNvbldlYlRva2VuRXJyb3IucHJvdG90eXBlKTtcblxuVG9rZW5FeHBpcmVkRXJyb3IucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gVG9rZW5FeHBpcmVkRXJyb3I7XG5cbm1vZHVsZS5leHBvcnRzID0gVG9rZW5FeHBpcmVkRXJyb3I7Il0sIm5hbWVzIjpbIkpzb25XZWJUb2tlbkVycm9yIiwicmVxdWlyZSIsIlRva2VuRXhwaXJlZEVycm9yIiwibWVzc2FnZSIsImV4cGlyZWRBdCIsImNhbGwiLCJuYW1lIiwicHJvdG90eXBlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/lib/TokenExpiredError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonwebtoken/lib/psSupported.js":
/*!******************************************************!*\
  !*** ./node_modules/jsonwebtoken/lib/psSupported.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar semver = __webpack_require__(/*! semver */ \"(ssr)/./node_modules/jsonwebtoken/node_modules/semver/semver.js\");\nmodule.exports = semver.satisfies(process.version, \"^6.12.0 || >=8.0.0\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL2xpYi9wc1N1cHBvcnRlZC5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFFckJDLE9BQU9DLE9BQU8sR0FBR0gsT0FBT0ksU0FBUyxDQUFDQyxRQUFRQyxPQUFPLEVBQUUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb25zdHJ1Y3Rpb24tbWFuYWdlbWVudC1uZXh0anMvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL2xpYi9wc1N1cHBvcnRlZC5qcz9jOGQ0Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBzZW12ZXIgPSByZXF1aXJlKCdzZW12ZXInKTtcblxubW9kdWxlLmV4cG9ydHMgPSBzZW12ZXIuc2F0aXNmaWVzKHByb2Nlc3MudmVyc2lvbiwgJ142LjEyLjAgfHwgPj04LjAuMCcpO1xuIl0sIm5hbWVzIjpbInNlbXZlciIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwic2F0aXNmaWVzIiwicHJvY2VzcyIsInZlcnNpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/lib/psSupported.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonwebtoken/lib/timespan.js":
/*!***************************************************!*\
  !*** ./node_modules/jsonwebtoken/lib/timespan.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar ms = __webpack_require__(/*! ms */ \"(ssr)/./node_modules/ms/index.js\");\nmodule.exports = function(time, iat) {\n    var timestamp = iat || Math.floor(Date.now() / 1000);\n    if (typeof time === \"string\") {\n        var milliseconds = ms(time);\n        if (typeof milliseconds === \"undefined\") {\n            return;\n        }\n        return Math.floor(timestamp + milliseconds / 1000);\n    } else if (typeof time === \"number\") {\n        return timestamp + time;\n    } else {\n        return;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL2xpYi90aW1lc3Bhbi5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsS0FBS0MsbUJBQU9BLENBQUM7QUFFakJDLE9BQU9DLE9BQU8sR0FBRyxTQUFVQyxJQUFJLEVBQUVDLEdBQUc7SUFDbEMsSUFBSUMsWUFBWUQsT0FBT0UsS0FBS0MsS0FBSyxDQUFDQyxLQUFLQyxHQUFHLEtBQUs7SUFFL0MsSUFBSSxPQUFPTixTQUFTLFVBQVU7UUFDNUIsSUFBSU8sZUFBZVgsR0FBR0k7UUFDdEIsSUFBSSxPQUFPTyxpQkFBaUIsYUFBYTtZQUN2QztRQUNGO1FBQ0EsT0FBT0osS0FBS0MsS0FBSyxDQUFDRixZQUFZSyxlQUFlO0lBQy9DLE9BQU8sSUFBSSxPQUFPUCxTQUFTLFVBQVU7UUFDbkMsT0FBT0UsWUFBWUY7SUFDckIsT0FBTztRQUNMO0lBQ0Y7QUFFRiIsInNvdXJjZXMiOlsid2VicGFjazovL2NvbnN0cnVjdGlvbi1tYW5hZ2VtZW50LW5leHRqcy8uL25vZGVfbW9kdWxlcy9qc29ud2VidG9rZW4vbGliL3RpbWVzcGFuLmpzP2NlZjAiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIG1zID0gcmVxdWlyZSgnbXMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGltZSwgaWF0KSB7XG4gIHZhciB0aW1lc3RhbXAgPSBpYXQgfHwgTWF0aC5mbG9vcihEYXRlLm5vdygpIC8gMTAwMCk7XG5cbiAgaWYgKHR5cGVvZiB0aW1lID09PSAnc3RyaW5nJykge1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBtcyh0aW1lKTtcbiAgICBpZiAodHlwZW9mIG1pbGxpc2Vjb25kcyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgcmV0dXJuIE1hdGguZmxvb3IodGltZXN0YW1wICsgbWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHRpbWUgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuIHRpbWVzdGFtcCArIHRpbWU7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbn07Il0sIm5hbWVzIjpbIm1zIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJ0aW1lIiwiaWF0IiwidGltZXN0YW1wIiwiTWF0aCIsImZsb29yIiwiRGF0ZSIsIm5vdyIsIm1pbGxpc2Vjb25kcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/lib/timespan.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonwebtoken/node_modules/semver/semver.js":
/*!*****************************************************************!*\
  !*** ./node_modules/jsonwebtoken/node_modules/semver/semver.js ***!
  \*****************************************************************/
/***/ ((module, exports) => {

eval("\nexports = module.exports = SemVer;\nvar debug;\n/* istanbul ignore next */ if (typeof process === \"object\" && process.env && process.env.NODE_DEBUG && /\\bsemver\\b/i.test(process.env.NODE_DEBUG)) {\n    debug = function() {\n        var args = Array.prototype.slice.call(arguments, 0);\n        args.unshift(\"SEMVER\");\n        console.log.apply(console, args);\n    };\n} else {\n    debug = function() {};\n}\n// Note: this is the semver.org version of the spec that it implements\n// Not necessarily the package version of this code.\nexports.SEMVER_SPEC_VERSION = \"2.0.0\";\nvar MAX_LENGTH = 256;\nvar MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || /* istanbul ignore next */ 9007199254740991;\n// Max safe segment length for coercion.\nvar MAX_SAFE_COMPONENT_LENGTH = 16;\nvar MAX_SAFE_BUILD_LENGTH = MAX_LENGTH - 6;\n// The actual regexps go on exports.re\nvar re = exports.re = [];\nvar safeRe = exports.safeRe = [];\nvar src = exports.src = [];\nvar R = 0;\nvar LETTERDASHNUMBER = \"[a-zA-Z0-9-]\";\n// Replace some greedy regex tokens to prevent regex dos issues. These regex are\n// used internally via the safeRe object since all inputs in this library get\n// normalized first to trim and collapse all extra whitespace. The original\n// regexes are exported for userland consumption and lower level usage. A\n// future breaking change could export the safer regex only with a note that\n// all input should have extra whitespace removed.\nvar safeRegexReplacements = [\n    [\n        \"\\\\s\",\n        1\n    ],\n    [\n        \"\\\\d\",\n        MAX_LENGTH\n    ],\n    [\n        LETTERDASHNUMBER,\n        MAX_SAFE_BUILD_LENGTH\n    ]\n];\nfunction makeSafeRe(value) {\n    for(var i = 0; i < safeRegexReplacements.length; i++){\n        var token = safeRegexReplacements[i][0];\n        var max = safeRegexReplacements[i][1];\n        value = value.split(token + \"*\").join(token + \"{0,\" + max + \"}\").split(token + \"+\").join(token + \"{1,\" + max + \"}\");\n    }\n    return value;\n}\n// The following Regular Expressions can be used for tokenizing,\n// validating, and parsing SemVer version strings.\n// ## Numeric Identifier\n// A single `0`, or a non-zero digit followed by zero or more digits.\nvar NUMERICIDENTIFIER = R++;\nsrc[NUMERICIDENTIFIER] = \"0|[1-9]\\\\d*\";\nvar NUMERICIDENTIFIERLOOSE = R++;\nsrc[NUMERICIDENTIFIERLOOSE] = \"\\\\d+\";\n// ## Non-numeric Identifier\n// Zero or more digits, followed by a letter or hyphen, and then zero or\n// more letters, digits, or hyphens.\nvar NONNUMERICIDENTIFIER = R++;\nsrc[NONNUMERICIDENTIFIER] = \"\\\\d*[a-zA-Z-]\" + LETTERDASHNUMBER + \"*\";\n// ## Main Version\n// Three dot-separated numeric identifiers.\nvar MAINVERSION = R++;\nsrc[MAINVERSION] = \"(\" + src[NUMERICIDENTIFIER] + \")\\\\.\" + \"(\" + src[NUMERICIDENTIFIER] + \")\\\\.\" + \"(\" + src[NUMERICIDENTIFIER] + \")\";\nvar MAINVERSIONLOOSE = R++;\nsrc[MAINVERSIONLOOSE] = \"(\" + src[NUMERICIDENTIFIERLOOSE] + \")\\\\.\" + \"(\" + src[NUMERICIDENTIFIERLOOSE] + \")\\\\.\" + \"(\" + src[NUMERICIDENTIFIERLOOSE] + \")\";\n// ## Pre-release Version Identifier\n// A numeric identifier, or a non-numeric identifier.\nvar PRERELEASEIDENTIFIER = R++;\nsrc[PRERELEASEIDENTIFIER] = \"(?:\" + src[NUMERICIDENTIFIER] + \"|\" + src[NONNUMERICIDENTIFIER] + \")\";\nvar PRERELEASEIDENTIFIERLOOSE = R++;\nsrc[PRERELEASEIDENTIFIERLOOSE] = \"(?:\" + src[NUMERICIDENTIFIERLOOSE] + \"|\" + src[NONNUMERICIDENTIFIER] + \")\";\n// ## Pre-release Version\n// Hyphen, followed by one or more dot-separated pre-release version\n// identifiers.\nvar PRERELEASE = R++;\nsrc[PRERELEASE] = \"(?:-(\" + src[PRERELEASEIDENTIFIER] + \"(?:\\\\.\" + src[PRERELEASEIDENTIFIER] + \")*))\";\nvar PRERELEASELOOSE = R++;\nsrc[PRERELEASELOOSE] = \"(?:-?(\" + src[PRERELEASEIDENTIFIERLOOSE] + \"(?:\\\\.\" + src[PRERELEASEIDENTIFIERLOOSE] + \")*))\";\n// ## Build Metadata Identifier\n// Any combination of digits, letters, or hyphens.\nvar BUILDIDENTIFIER = R++;\nsrc[BUILDIDENTIFIER] = LETTERDASHNUMBER + \"+\";\n// ## Build Metadata\n// Plus sign, followed by one or more period-separated build metadata\n// identifiers.\nvar BUILD = R++;\nsrc[BUILD] = \"(?:\\\\+(\" + src[BUILDIDENTIFIER] + \"(?:\\\\.\" + src[BUILDIDENTIFIER] + \")*))\";\n// ## Full Version String\n// A main version, followed optionally by a pre-release version and\n// build metadata.\n// Note that the only major, minor, patch, and pre-release sections of\n// the version string are capturing groups.  The build metadata is not a\n// capturing group, because it should not ever be used in version\n// comparison.\nvar FULL = R++;\nvar FULLPLAIN = \"v?\" + src[MAINVERSION] + src[PRERELEASE] + \"?\" + src[BUILD] + \"?\";\nsrc[FULL] = \"^\" + FULLPLAIN + \"$\";\n// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.\n// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty\n// common in the npm registry.\nvar LOOSEPLAIN = \"[v=\\\\s]*\" + src[MAINVERSIONLOOSE] + src[PRERELEASELOOSE] + \"?\" + src[BUILD] + \"?\";\nvar LOOSE = R++;\nsrc[LOOSE] = \"^\" + LOOSEPLAIN + \"$\";\nvar GTLT = R++;\nsrc[GTLT] = \"((?:<|>)?=?)\";\n// Something like \"2.*\" or \"1.2.x\".\n// Note that \"x.x\" is a valid xRange identifer, meaning \"any version\"\n// Only the first item is strictly required.\nvar XRANGEIDENTIFIERLOOSE = R++;\nsrc[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + \"|x|X|\\\\*\";\nvar XRANGEIDENTIFIER = R++;\nsrc[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + \"|x|X|\\\\*\";\nvar XRANGEPLAIN = R++;\nsrc[XRANGEPLAIN] = \"[v=\\\\s]*(\" + src[XRANGEIDENTIFIER] + \")\" + \"(?:\\\\.(\" + src[XRANGEIDENTIFIER] + \")\" + \"(?:\\\\.(\" + src[XRANGEIDENTIFIER] + \")\" + \"(?:\" + src[PRERELEASE] + \")?\" + src[BUILD] + \"?\" + \")?)?\";\nvar XRANGEPLAINLOOSE = R++;\nsrc[XRANGEPLAINLOOSE] = \"[v=\\\\s]*(\" + src[XRANGEIDENTIFIERLOOSE] + \")\" + \"(?:\\\\.(\" + src[XRANGEIDENTIFIERLOOSE] + \")\" + \"(?:\\\\.(\" + src[XRANGEIDENTIFIERLOOSE] + \")\" + \"(?:\" + src[PRERELEASELOOSE] + \")?\" + src[BUILD] + \"?\" + \")?)?\";\nvar XRANGE = R++;\nsrc[XRANGE] = \"^\" + src[GTLT] + \"\\\\s*\" + src[XRANGEPLAIN] + \"$\";\nvar XRANGELOOSE = R++;\nsrc[XRANGELOOSE] = \"^\" + src[GTLT] + \"\\\\s*\" + src[XRANGEPLAINLOOSE] + \"$\";\n// Coercion.\n// Extract anything that could conceivably be a part of a valid semver\nvar COERCE = R++;\nsrc[COERCE] = \"(?:^|[^\\\\d])\" + \"(\\\\d{1,\" + MAX_SAFE_COMPONENT_LENGTH + \"})\" + \"(?:\\\\.(\\\\d{1,\" + MAX_SAFE_COMPONENT_LENGTH + \"}))?\" + \"(?:\\\\.(\\\\d{1,\" + MAX_SAFE_COMPONENT_LENGTH + \"}))?\" + \"(?:$|[^\\\\d])\";\n// Tilde ranges.\n// Meaning is \"reasonably at or greater than\"\nvar LONETILDE = R++;\nsrc[LONETILDE] = \"(?:~>?)\";\nvar TILDETRIM = R++;\nsrc[TILDETRIM] = \"(\\\\s*)\" + src[LONETILDE] + \"\\\\s+\";\nre[TILDETRIM] = new RegExp(src[TILDETRIM], \"g\");\nsafeRe[TILDETRIM] = new RegExp(makeSafeRe(src[TILDETRIM]), \"g\");\nvar tildeTrimReplace = \"$1~\";\nvar TILDE = R++;\nsrc[TILDE] = \"^\" + src[LONETILDE] + src[XRANGEPLAIN] + \"$\";\nvar TILDELOOSE = R++;\nsrc[TILDELOOSE] = \"^\" + src[LONETILDE] + src[XRANGEPLAINLOOSE] + \"$\";\n// Caret ranges.\n// Meaning is \"at least and backwards compatible with\"\nvar LONECARET = R++;\nsrc[LONECARET] = \"(?:\\\\^)\";\nvar CARETTRIM = R++;\nsrc[CARETTRIM] = \"(\\\\s*)\" + src[LONECARET] + \"\\\\s+\";\nre[CARETTRIM] = new RegExp(src[CARETTRIM], \"g\");\nsafeRe[CARETTRIM] = new RegExp(makeSafeRe(src[CARETTRIM]), \"g\");\nvar caretTrimReplace = \"$1^\";\nvar CARET = R++;\nsrc[CARET] = \"^\" + src[LONECARET] + src[XRANGEPLAIN] + \"$\";\nvar CARETLOOSE = R++;\nsrc[CARETLOOSE] = \"^\" + src[LONECARET] + src[XRANGEPLAINLOOSE] + \"$\";\n// A simple gt/lt/eq thing, or just \"\" to indicate \"any version\"\nvar COMPARATORLOOSE = R++;\nsrc[COMPARATORLOOSE] = \"^\" + src[GTLT] + \"\\\\s*(\" + LOOSEPLAIN + \")$|^$\";\nvar COMPARATOR = R++;\nsrc[COMPARATOR] = \"^\" + src[GTLT] + \"\\\\s*(\" + FULLPLAIN + \")$|^$\";\n// An expression to strip any whitespace between the gtlt and the thing\n// it modifies, so that `> 1.2.3` ==> `>1.2.3`\nvar COMPARATORTRIM = R++;\nsrc[COMPARATORTRIM] = \"(\\\\s*)\" + src[GTLT] + \"\\\\s*(\" + LOOSEPLAIN + \"|\" + src[XRANGEPLAIN] + \")\";\n// this one has to use the /g flag\nre[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], \"g\");\nsafeRe[COMPARATORTRIM] = new RegExp(makeSafeRe(src[COMPARATORTRIM]), \"g\");\nvar comparatorTrimReplace = \"$1$2$3\";\n// Something like `1.2.3 - 1.2.4`\n// Note that these all use the loose form, because they'll be\n// checked against either the strict or loose comparator form\n// later.\nvar HYPHENRANGE = R++;\nsrc[HYPHENRANGE] = \"^\\\\s*(\" + src[XRANGEPLAIN] + \")\" + \"\\\\s+-\\\\s+\" + \"(\" + src[XRANGEPLAIN] + \")\" + \"\\\\s*$\";\nvar HYPHENRANGELOOSE = R++;\nsrc[HYPHENRANGELOOSE] = \"^\\\\s*(\" + src[XRANGEPLAINLOOSE] + \")\" + \"\\\\s+-\\\\s+\" + \"(\" + src[XRANGEPLAINLOOSE] + \")\" + \"\\\\s*$\";\n// Star ranges basically just allow anything at all.\nvar STAR = R++;\nsrc[STAR] = \"(<|>)?=?\\\\s*\\\\*\";\n// Compile to actual regexp objects.\n// All are flag-free, unless they were created above with a flag.\nfor(var i = 0; i < R; i++){\n    debug(i, src[i]);\n    if (!re[i]) {\n        re[i] = new RegExp(src[i]);\n        // Replace all greedy whitespace to prevent regex dos issues. These regex are\n        // used internally via the safeRe object since all inputs in this library get\n        // normalized first to trim and collapse all extra whitespace. The original\n        // regexes are exported for userland consumption and lower level usage. A\n        // future breaking change could export the safer regex only with a note that\n        // all input should have extra whitespace removed.\n        safeRe[i] = new RegExp(makeSafeRe(src[i]));\n    }\n}\nexports.parse = parse;\nfunction parse(version, options) {\n    if (!options || typeof options !== \"object\") {\n        options = {\n            loose: !!options,\n            includePrerelease: false\n        };\n    }\n    if (version instanceof SemVer) {\n        return version;\n    }\n    if (typeof version !== \"string\") {\n        return null;\n    }\n    if (version.length > MAX_LENGTH) {\n        return null;\n    }\n    var r = options.loose ? safeRe[LOOSE] : safeRe[FULL];\n    if (!r.test(version)) {\n        return null;\n    }\n    try {\n        return new SemVer(version, options);\n    } catch (er) {\n        return null;\n    }\n}\nexports.valid = valid;\nfunction valid(version, options) {\n    var v = parse(version, options);\n    return v ? v.version : null;\n}\nexports.clean = clean;\nfunction clean(version, options) {\n    var s = parse(version.trim().replace(/^[=v]+/, \"\"), options);\n    return s ? s.version : null;\n}\nexports.SemVer = SemVer;\nfunction SemVer(version, options) {\n    if (!options || typeof options !== \"object\") {\n        options = {\n            loose: !!options,\n            includePrerelease: false\n        };\n    }\n    if (version instanceof SemVer) {\n        if (version.loose === options.loose) {\n            return version;\n        } else {\n            version = version.version;\n        }\n    } else if (typeof version !== \"string\") {\n        throw new TypeError(\"Invalid Version: \" + version);\n    }\n    if (version.length > MAX_LENGTH) {\n        throw new TypeError(\"version is longer than \" + MAX_LENGTH + \" characters\");\n    }\n    if (!(this instanceof SemVer)) {\n        return new SemVer(version, options);\n    }\n    debug(\"SemVer\", version, options);\n    this.options = options;\n    this.loose = !!options.loose;\n    var m = version.trim().match(options.loose ? safeRe[LOOSE] : safeRe[FULL]);\n    if (!m) {\n        throw new TypeError(\"Invalid Version: \" + version);\n    }\n    this.raw = version;\n    // these are actually numbers\n    this.major = +m[1];\n    this.minor = +m[2];\n    this.patch = +m[3];\n    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {\n        throw new TypeError(\"Invalid major version\");\n    }\n    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {\n        throw new TypeError(\"Invalid minor version\");\n    }\n    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {\n        throw new TypeError(\"Invalid patch version\");\n    }\n    // numberify any prerelease numeric ids\n    if (!m[4]) {\n        this.prerelease = [];\n    } else {\n        this.prerelease = m[4].split(\".\").map(function(id) {\n            if (/^[0-9]+$/.test(id)) {\n                var num = +id;\n                if (num >= 0 && num < MAX_SAFE_INTEGER) {\n                    return num;\n                }\n            }\n            return id;\n        });\n    }\n    this.build = m[5] ? m[5].split(\".\") : [];\n    this.format();\n}\nSemVer.prototype.format = function() {\n    this.version = this.major + \".\" + this.minor + \".\" + this.patch;\n    if (this.prerelease.length) {\n        this.version += \"-\" + this.prerelease.join(\".\");\n    }\n    return this.version;\n};\nSemVer.prototype.toString = function() {\n    return this.version;\n};\nSemVer.prototype.compare = function(other) {\n    debug(\"SemVer.compare\", this.version, this.options, other);\n    if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n    }\n    return this.compareMain(other) || this.comparePre(other);\n};\nSemVer.prototype.compareMain = function(other) {\n    if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n    }\n    return compareIdentifiers(this.major, other.major) || compareIdentifiers(this.minor, other.minor) || compareIdentifiers(this.patch, other.patch);\n};\nSemVer.prototype.comparePre = function(other) {\n    if (!(other instanceof SemVer)) {\n        other = new SemVer(other, this.options);\n    }\n    // NOT having a prerelease is > having one\n    if (this.prerelease.length && !other.prerelease.length) {\n        return -1;\n    } else if (!this.prerelease.length && other.prerelease.length) {\n        return 1;\n    } else if (!this.prerelease.length && !other.prerelease.length) {\n        return 0;\n    }\n    var i = 0;\n    do {\n        var a = this.prerelease[i];\n        var b = other.prerelease[i];\n        debug(\"prerelease compare\", i, a, b);\n        if (a === undefined && b === undefined) {\n            return 0;\n        } else if (b === undefined) {\n            return 1;\n        } else if (a === undefined) {\n            return -1;\n        } else if (a === b) {\n            continue;\n        } else {\n            return compareIdentifiers(a, b);\n        }\n    }while (++i);\n};\n// preminor will bump the version up to the next minor release, and immediately\n// down to pre-release. premajor and prepatch work the same way.\nSemVer.prototype.inc = function(release, identifier) {\n    switch(release){\n        case \"premajor\":\n            this.prerelease.length = 0;\n            this.patch = 0;\n            this.minor = 0;\n            this.major++;\n            this.inc(\"pre\", identifier);\n            break;\n        case \"preminor\":\n            this.prerelease.length = 0;\n            this.patch = 0;\n            this.minor++;\n            this.inc(\"pre\", identifier);\n            break;\n        case \"prepatch\":\n            // If this is already a prerelease, it will bump to the next version\n            // drop any prereleases that might already exist, since they are not\n            // relevant at this point.\n            this.prerelease.length = 0;\n            this.inc(\"patch\", identifier);\n            this.inc(\"pre\", identifier);\n            break;\n        // If the input is a non-prerelease version, this acts the same as\n        // prepatch.\n        case \"prerelease\":\n            if (this.prerelease.length === 0) {\n                this.inc(\"patch\", identifier);\n            }\n            this.inc(\"pre\", identifier);\n            break;\n        case \"major\":\n            // If this is a pre-major version, bump up to the same major version.\n            // Otherwise increment major.\n            // 1.0.0-5 bumps to 1.0.0\n            // 1.1.0 bumps to 2.0.0\n            if (this.minor !== 0 || this.patch !== 0 || this.prerelease.length === 0) {\n                this.major++;\n            }\n            this.minor = 0;\n            this.patch = 0;\n            this.prerelease = [];\n            break;\n        case \"minor\":\n            // If this is a pre-minor version, bump up to the same minor version.\n            // Otherwise increment minor.\n            // 1.2.0-5 bumps to 1.2.0\n            // 1.2.1 bumps to 1.3.0\n            if (this.patch !== 0 || this.prerelease.length === 0) {\n                this.minor++;\n            }\n            this.patch = 0;\n            this.prerelease = [];\n            break;\n        case \"patch\":\n            // If this is not a pre-release version, it will increment the patch.\n            // If it is a pre-release it will bump up to the same patch version.\n            // 1.2.0-5 patches to 1.2.0\n            // 1.2.0 patches to 1.2.1\n            if (this.prerelease.length === 0) {\n                this.patch++;\n            }\n            this.prerelease = [];\n            break;\n        // This probably shouldn't be used publicly.\n        // 1.0.0 \"pre\" would become 1.0.0-0 which is the wrong direction.\n        case \"pre\":\n            if (this.prerelease.length === 0) {\n                this.prerelease = [\n                    0\n                ];\n            } else {\n                var i = this.prerelease.length;\n                while(--i >= 0){\n                    if (typeof this.prerelease[i] === \"number\") {\n                        this.prerelease[i]++;\n                        i = -2;\n                    }\n                }\n                if (i === -1) {\n                    // didn't increment anything\n                    this.prerelease.push(0);\n                }\n            }\n            if (identifier) {\n                // 1.2.0-beta.1 bumps to 1.2.0-beta.2,\n                // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0\n                if (this.prerelease[0] === identifier) {\n                    if (isNaN(this.prerelease[1])) {\n                        this.prerelease = [\n                            identifier,\n                            0\n                        ];\n                    }\n                } else {\n                    this.prerelease = [\n                        identifier,\n                        0\n                    ];\n                }\n            }\n            break;\n        default:\n            throw new Error(\"invalid increment argument: \" + release);\n    }\n    this.format();\n    this.raw = this.version;\n    return this;\n};\nexports.inc = inc;\nfunction inc(version, release, loose, identifier) {\n    if (typeof loose === \"string\") {\n        identifier = loose;\n        loose = undefined;\n    }\n    try {\n        return new SemVer(version, loose).inc(release, identifier).version;\n    } catch (er) {\n        return null;\n    }\n}\nexports.diff = diff;\nfunction diff(version1, version2) {\n    if (eq(version1, version2)) {\n        return null;\n    } else {\n        var v1 = parse(version1);\n        var v2 = parse(version2);\n        var prefix = \"\";\n        if (v1.prerelease.length || v2.prerelease.length) {\n            prefix = \"pre\";\n            var defaultResult = \"prerelease\";\n        }\n        for(var key in v1){\n            if (key === \"major\" || key === \"minor\" || key === \"patch\") {\n                if (v1[key] !== v2[key]) {\n                    return prefix + key;\n                }\n            }\n        }\n        return defaultResult // may be undefined\n        ;\n    }\n}\nexports.compareIdentifiers = compareIdentifiers;\nvar numeric = /^[0-9]+$/;\nfunction compareIdentifiers(a, b) {\n    var anum = numeric.test(a);\n    var bnum = numeric.test(b);\n    if (anum && bnum) {\n        a = +a;\n        b = +b;\n    }\n    return a === b ? 0 : anum && !bnum ? -1 : bnum && !anum ? 1 : a < b ? -1 : 1;\n}\nexports.rcompareIdentifiers = rcompareIdentifiers;\nfunction rcompareIdentifiers(a, b) {\n    return compareIdentifiers(b, a);\n}\nexports.major = major;\nfunction major(a, loose) {\n    return new SemVer(a, loose).major;\n}\nexports.minor = minor;\nfunction minor(a, loose) {\n    return new SemVer(a, loose).minor;\n}\nexports.patch = patch;\nfunction patch(a, loose) {\n    return new SemVer(a, loose).patch;\n}\nexports.compare = compare;\nfunction compare(a, b, loose) {\n    return new SemVer(a, loose).compare(new SemVer(b, loose));\n}\nexports.compareLoose = compareLoose;\nfunction compareLoose(a, b) {\n    return compare(a, b, true);\n}\nexports.rcompare = rcompare;\nfunction rcompare(a, b, loose) {\n    return compare(b, a, loose);\n}\nexports.sort = sort;\nfunction sort(list, loose) {\n    return list.sort(function(a, b) {\n        return exports.compare(a, b, loose);\n    });\n}\nexports.rsort = rsort;\nfunction rsort(list, loose) {\n    return list.sort(function(a, b) {\n        return exports.rcompare(a, b, loose);\n    });\n}\nexports.gt = gt;\nfunction gt(a, b, loose) {\n    return compare(a, b, loose) > 0;\n}\nexports.lt = lt;\nfunction lt(a, b, loose) {\n    return compare(a, b, loose) < 0;\n}\nexports.eq = eq;\nfunction eq(a, b, loose) {\n    return compare(a, b, loose) === 0;\n}\nexports.neq = neq;\nfunction neq(a, b, loose) {\n    return compare(a, b, loose) !== 0;\n}\nexports.gte = gte;\nfunction gte(a, b, loose) {\n    return compare(a, b, loose) >= 0;\n}\nexports.lte = lte;\nfunction lte(a, b, loose) {\n    return compare(a, b, loose) <= 0;\n}\nexports.cmp = cmp;\nfunction cmp(a, op, b, loose) {\n    switch(op){\n        case \"===\":\n            if (typeof a === \"object\") a = a.version;\n            if (typeof b === \"object\") b = b.version;\n            return a === b;\n        case \"!==\":\n            if (typeof a === \"object\") a = a.version;\n            if (typeof b === \"object\") b = b.version;\n            return a !== b;\n        case \"\":\n        case \"=\":\n        case \"==\":\n            return eq(a, b, loose);\n        case \"!=\":\n            return neq(a, b, loose);\n        case \">\":\n            return gt(a, b, loose);\n        case \">=\":\n            return gte(a, b, loose);\n        case \"<\":\n            return lt(a, b, loose);\n        case \"<=\":\n            return lte(a, b, loose);\n        default:\n            throw new TypeError(\"Invalid operator: \" + op);\n    }\n}\nexports.Comparator = Comparator;\nfunction Comparator(comp, options) {\n    if (!options || typeof options !== \"object\") {\n        options = {\n            loose: !!options,\n            includePrerelease: false\n        };\n    }\n    if (comp instanceof Comparator) {\n        if (comp.loose === !!options.loose) {\n            return comp;\n        } else {\n            comp = comp.value;\n        }\n    }\n    if (!(this instanceof Comparator)) {\n        return new Comparator(comp, options);\n    }\n    comp = comp.trim().split(/\\s+/).join(\" \");\n    debug(\"comparator\", comp, options);\n    this.options = options;\n    this.loose = !!options.loose;\n    this.parse(comp);\n    if (this.semver === ANY) {\n        this.value = \"\";\n    } else {\n        this.value = this.operator + this.semver.version;\n    }\n    debug(\"comp\", this);\n}\nvar ANY = {};\nComparator.prototype.parse = function(comp) {\n    var r = this.options.loose ? safeRe[COMPARATORLOOSE] : safeRe[COMPARATOR];\n    var m = comp.match(r);\n    if (!m) {\n        throw new TypeError(\"Invalid comparator: \" + comp);\n    }\n    this.operator = m[1];\n    if (this.operator === \"=\") {\n        this.operator = \"\";\n    }\n    // if it literally is just '>' or '' then allow anything.\n    if (!m[2]) {\n        this.semver = ANY;\n    } else {\n        this.semver = new SemVer(m[2], this.options.loose);\n    }\n};\nComparator.prototype.toString = function() {\n    return this.value;\n};\nComparator.prototype.test = function(version) {\n    debug(\"Comparator.test\", version, this.options.loose);\n    if (this.semver === ANY) {\n        return true;\n    }\n    if (typeof version === \"string\") {\n        version = new SemVer(version, this.options);\n    }\n    return cmp(version, this.operator, this.semver, this.options);\n};\nComparator.prototype.intersects = function(comp, options) {\n    if (!(comp instanceof Comparator)) {\n        throw new TypeError(\"a Comparator is required\");\n    }\n    if (!options || typeof options !== \"object\") {\n        options = {\n            loose: !!options,\n            includePrerelease: false\n        };\n    }\n    var rangeTmp;\n    if (this.operator === \"\") {\n        rangeTmp = new Range(comp.value, options);\n        return satisfies(this.value, rangeTmp, options);\n    } else if (comp.operator === \"\") {\n        rangeTmp = new Range(this.value, options);\n        return satisfies(comp.semver, rangeTmp, options);\n    }\n    var sameDirectionIncreasing = (this.operator === \">=\" || this.operator === \">\") && (comp.operator === \">=\" || comp.operator === \">\");\n    var sameDirectionDecreasing = (this.operator === \"<=\" || this.operator === \"<\") && (comp.operator === \"<=\" || comp.operator === \"<\");\n    var sameSemVer = this.semver.version === comp.semver.version;\n    var differentDirectionsInclusive = (this.operator === \">=\" || this.operator === \"<=\") && (comp.operator === \">=\" || comp.operator === \"<=\");\n    var oppositeDirectionsLessThan = cmp(this.semver, \"<\", comp.semver, options) && (this.operator === \">=\" || this.operator === \">\") && (comp.operator === \"<=\" || comp.operator === \"<\");\n    var oppositeDirectionsGreaterThan = cmp(this.semver, \">\", comp.semver, options) && (this.operator === \"<=\" || this.operator === \"<\") && (comp.operator === \">=\" || comp.operator === \">\");\n    return sameDirectionIncreasing || sameDirectionDecreasing || sameSemVer && differentDirectionsInclusive || oppositeDirectionsLessThan || oppositeDirectionsGreaterThan;\n};\nexports.Range = Range;\nfunction Range(range, options) {\n    if (!options || typeof options !== \"object\") {\n        options = {\n            loose: !!options,\n            includePrerelease: false\n        };\n    }\n    if (range instanceof Range) {\n        if (range.loose === !!options.loose && range.includePrerelease === !!options.includePrerelease) {\n            return range;\n        } else {\n            return new Range(range.raw, options);\n        }\n    }\n    if (range instanceof Comparator) {\n        return new Range(range.value, options);\n    }\n    if (!(this instanceof Range)) {\n        return new Range(range, options);\n    }\n    this.options = options;\n    this.loose = !!options.loose;\n    this.includePrerelease = !!options.includePrerelease;\n    // First reduce all whitespace as much as possible so we do not have to rely\n    // on potentially slow regexes like \\s*. This is then stored and used for\n    // future error messages as well.\n    this.raw = range.trim().split(/\\s+/).join(\" \");\n    // First, split based on boolean or ||\n    this.set = this.raw.split(\"||\").map(function(range) {\n        return this.parseRange(range.trim());\n    }, this).filter(function(c) {\n        // throw out any that are not relevant for whatever reason\n        return c.length;\n    });\n    if (!this.set.length) {\n        throw new TypeError(\"Invalid SemVer Range: \" + this.raw);\n    }\n    this.format();\n}\nRange.prototype.format = function() {\n    this.range = this.set.map(function(comps) {\n        return comps.join(\" \").trim();\n    }).join(\"||\").trim();\n    return this.range;\n};\nRange.prototype.toString = function() {\n    return this.range;\n};\nRange.prototype.parseRange = function(range) {\n    var loose = this.options.loose;\n    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`\n    var hr = loose ? safeRe[HYPHENRANGELOOSE] : safeRe[HYPHENRANGE];\n    range = range.replace(hr, hyphenReplace);\n    debug(\"hyphen replace\", range);\n    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`\n    range = range.replace(safeRe[COMPARATORTRIM], comparatorTrimReplace);\n    debug(\"comparator trim\", range, safeRe[COMPARATORTRIM]);\n    // `~ 1.2.3` => `~1.2.3`\n    range = range.replace(safeRe[TILDETRIM], tildeTrimReplace);\n    // `^ 1.2.3` => `^1.2.3`\n    range = range.replace(safeRe[CARETTRIM], caretTrimReplace);\n    // At this point, the range is completely trimmed and\n    // ready to be split into comparators.\n    var compRe = loose ? safeRe[COMPARATORLOOSE] : safeRe[COMPARATOR];\n    var set = range.split(\" \").map(function(comp) {\n        return parseComparator(comp, this.options);\n    }, this).join(\" \").split(/\\s+/);\n    if (this.options.loose) {\n        // in loose mode, throw out any that are not valid comparators\n        set = set.filter(function(comp) {\n            return !!comp.match(compRe);\n        });\n    }\n    set = set.map(function(comp) {\n        return new Comparator(comp, this.options);\n    }, this);\n    return set;\n};\nRange.prototype.intersects = function(range, options) {\n    if (!(range instanceof Range)) {\n        throw new TypeError(\"a Range is required\");\n    }\n    return this.set.some(function(thisComparators) {\n        return thisComparators.every(function(thisComparator) {\n            return range.set.some(function(rangeComparators) {\n                return rangeComparators.every(function(rangeComparator) {\n                    return thisComparator.intersects(rangeComparator, options);\n                });\n            });\n        });\n    });\n};\n// Mostly just for testing and legacy API reasons\nexports.toComparators = toComparators;\nfunction toComparators(range, options) {\n    return new Range(range, options).set.map(function(comp) {\n        return comp.map(function(c) {\n            return c.value;\n        }).join(\" \").trim().split(\" \");\n    });\n}\n// comprised of xranges, tildes, stars, and gtlt's at this point.\n// already replaced the hyphen ranges\n// turn into a set of JUST comparators.\nfunction parseComparator(comp, options) {\n    debug(\"comp\", comp, options);\n    comp = replaceCarets(comp, options);\n    debug(\"caret\", comp);\n    comp = replaceTildes(comp, options);\n    debug(\"tildes\", comp);\n    comp = replaceXRanges(comp, options);\n    debug(\"xrange\", comp);\n    comp = replaceStars(comp, options);\n    debug(\"stars\", comp);\n    return comp;\n}\nfunction isX(id) {\n    return !id || id.toLowerCase() === \"x\" || id === \"*\";\n}\n// ~, ~> --> * (any, kinda silly)\n// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0\n// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0\n// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0\n// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0\n// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0\nfunction replaceTildes(comp, options) {\n    return comp.trim().split(/\\s+/).map(function(comp) {\n        return replaceTilde(comp, options);\n    }).join(\" \");\n}\nfunction replaceTilde(comp, options) {\n    var r = options.loose ? safeRe[TILDELOOSE] : safeRe[TILDE];\n    return comp.replace(r, function(_, M, m, p, pr) {\n        debug(\"tilde\", comp, _, M, m, p, pr);\n        var ret;\n        if (isX(M)) {\n            ret = \"\";\n        } else if (isX(m)) {\n            ret = \">=\" + M + \".0.0 <\" + (+M + 1) + \".0.0\";\n        } else if (isX(p)) {\n            // ~1.2 == >=1.2.0 <1.3.0\n            ret = \">=\" + M + \".\" + m + \".0 <\" + M + \".\" + (+m + 1) + \".0\";\n        } else if (pr) {\n            debug(\"replaceTilde pr\", pr);\n            ret = \">=\" + M + \".\" + m + \".\" + p + \"-\" + pr + \" <\" + M + \".\" + (+m + 1) + \".0\";\n        } else {\n            // ~1.2.3 == >=1.2.3 <1.3.0\n            ret = \">=\" + M + \".\" + m + \".\" + p + \" <\" + M + \".\" + (+m + 1) + \".0\";\n        }\n        debug(\"tilde return\", ret);\n        return ret;\n    });\n}\n// ^ --> * (any, kinda silly)\n// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0\n// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0\n// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0\n// ^1.2.3 --> >=1.2.3 <2.0.0\n// ^1.2.0 --> >=1.2.0 <2.0.0\nfunction replaceCarets(comp, options) {\n    return comp.trim().split(/\\s+/).map(function(comp) {\n        return replaceCaret(comp, options);\n    }).join(\" \");\n}\nfunction replaceCaret(comp, options) {\n    debug(\"caret\", comp, options);\n    var r = options.loose ? safeRe[CARETLOOSE] : safeRe[CARET];\n    return comp.replace(r, function(_, M, m, p, pr) {\n        debug(\"caret\", comp, _, M, m, p, pr);\n        var ret;\n        if (isX(M)) {\n            ret = \"\";\n        } else if (isX(m)) {\n            ret = \">=\" + M + \".0.0 <\" + (+M + 1) + \".0.0\";\n        } else if (isX(p)) {\n            if (M === \"0\") {\n                ret = \">=\" + M + \".\" + m + \".0 <\" + M + \".\" + (+m + 1) + \".0\";\n            } else {\n                ret = \">=\" + M + \".\" + m + \".0 <\" + (+M + 1) + \".0.0\";\n            }\n        } else if (pr) {\n            debug(\"replaceCaret pr\", pr);\n            if (M === \"0\") {\n                if (m === \"0\") {\n                    ret = \">=\" + M + \".\" + m + \".\" + p + \"-\" + pr + \" <\" + M + \".\" + m + \".\" + (+p + 1);\n                } else {\n                    ret = \">=\" + M + \".\" + m + \".\" + p + \"-\" + pr + \" <\" + M + \".\" + (+m + 1) + \".0\";\n                }\n            } else {\n                ret = \">=\" + M + \".\" + m + \".\" + p + \"-\" + pr + \" <\" + (+M + 1) + \".0.0\";\n            }\n        } else {\n            debug(\"no pr\");\n            if (M === \"0\") {\n                if (m === \"0\") {\n                    ret = \">=\" + M + \".\" + m + \".\" + p + \" <\" + M + \".\" + m + \".\" + (+p + 1);\n                } else {\n                    ret = \">=\" + M + \".\" + m + \".\" + p + \" <\" + M + \".\" + (+m + 1) + \".0\";\n                }\n            } else {\n                ret = \">=\" + M + \".\" + m + \".\" + p + \" <\" + (+M + 1) + \".0.0\";\n            }\n        }\n        debug(\"caret return\", ret);\n        return ret;\n    });\n}\nfunction replaceXRanges(comp, options) {\n    debug(\"replaceXRanges\", comp, options);\n    return comp.split(/\\s+/).map(function(comp) {\n        return replaceXRange(comp, options);\n    }).join(\" \");\n}\nfunction replaceXRange(comp, options) {\n    comp = comp.trim();\n    var r = options.loose ? safeRe[XRANGELOOSE] : safeRe[XRANGE];\n    return comp.replace(r, function(ret, gtlt, M, m, p, pr) {\n        debug(\"xRange\", comp, ret, gtlt, M, m, p, pr);\n        var xM = isX(M);\n        var xm = xM || isX(m);\n        var xp = xm || isX(p);\n        var anyX = xp;\n        if (gtlt === \"=\" && anyX) {\n            gtlt = \"\";\n        }\n        if (xM) {\n            if (gtlt === \">\" || gtlt === \"<\") {\n                // nothing is allowed\n                ret = \"<0.0.0\";\n            } else {\n                // nothing is forbidden\n                ret = \"*\";\n            }\n        } else if (gtlt && anyX) {\n            // we know patch is an x, because we have any x at all.\n            // replace X with 0\n            if (xm) {\n                m = 0;\n            }\n            p = 0;\n            if (gtlt === \">\") {\n                // >1 => >=2.0.0\n                // >1.2 => >=1.3.0\n                // >1.2.3 => >= 1.2.4\n                gtlt = \">=\";\n                if (xm) {\n                    M = +M + 1;\n                    m = 0;\n                    p = 0;\n                } else {\n                    m = +m + 1;\n                    p = 0;\n                }\n            } else if (gtlt === \"<=\") {\n                // <=0.7.x is actually <0.8.0, since any 0.7.x should\n                // pass.  Similarly, <=7.x is actually <8.0.0, etc.\n                gtlt = \"<\";\n                if (xm) {\n                    M = +M + 1;\n                } else {\n                    m = +m + 1;\n                }\n            }\n            ret = gtlt + M + \".\" + m + \".\" + p;\n        } else if (xm) {\n            ret = \">=\" + M + \".0.0 <\" + (+M + 1) + \".0.0\";\n        } else if (xp) {\n            ret = \">=\" + M + \".\" + m + \".0 <\" + M + \".\" + (+m + 1) + \".0\";\n        }\n        debug(\"xRange return\", ret);\n        return ret;\n    });\n}\n// Because * is AND-ed with everything else in the comparator,\n// and '' means \"any version\", just remove the *s entirely.\nfunction replaceStars(comp, options) {\n    debug(\"replaceStars\", comp, options);\n    // Looseness is ignored here.  star is always as loose as it gets!\n    return comp.trim().replace(safeRe[STAR], \"\");\n}\n// This function is passed to string.replace(safeRe[HYPHENRANGE])\n// M, m, patch, prerelease, build\n// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5\n// 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do\n// 1.2 - 3.4 => >=1.2.0 <3.5.0\nfunction hyphenReplace($0, from, fM, fm, fp, fpr, fb, to, tM, tm, tp, tpr, tb) {\n    if (isX(fM)) {\n        from = \"\";\n    } else if (isX(fm)) {\n        from = \">=\" + fM + \".0.0\";\n    } else if (isX(fp)) {\n        from = \">=\" + fM + \".\" + fm + \".0\";\n    } else {\n        from = \">=\" + from;\n    }\n    if (isX(tM)) {\n        to = \"\";\n    } else if (isX(tm)) {\n        to = \"<\" + (+tM + 1) + \".0.0\";\n    } else if (isX(tp)) {\n        to = \"<\" + tM + \".\" + (+tm + 1) + \".0\";\n    } else if (tpr) {\n        to = \"<=\" + tM + \".\" + tm + \".\" + tp + \"-\" + tpr;\n    } else {\n        to = \"<=\" + to;\n    }\n    return (from + \" \" + to).trim();\n}\n// if ANY of the sets match ALL of its comparators, then pass\nRange.prototype.test = function(version) {\n    if (!version) {\n        return false;\n    }\n    if (typeof version === \"string\") {\n        version = new SemVer(version, this.options);\n    }\n    for(var i = 0; i < this.set.length; i++){\n        if (testSet(this.set[i], version, this.options)) {\n            return true;\n        }\n    }\n    return false;\n};\nfunction testSet(set, version, options) {\n    for(var i = 0; i < set.length; i++){\n        if (!set[i].test(version)) {\n            return false;\n        }\n    }\n    if (version.prerelease.length && !options.includePrerelease) {\n        // Find the set of versions that are allowed to have prereleases\n        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0\n        // That should allow `1.2.3-pr.2` to pass.\n        // However, `1.2.4-alpha.notready` should NOT be allowed,\n        // even though it's within the range set by the comparators.\n        for(i = 0; i < set.length; i++){\n            debug(set[i].semver);\n            if (set[i].semver === ANY) {\n                continue;\n            }\n            if (set[i].semver.prerelease.length > 0) {\n                var allowed = set[i].semver;\n                if (allowed.major === version.major && allowed.minor === version.minor && allowed.patch === version.patch) {\n                    return true;\n                }\n            }\n        }\n        // Version has a -pre, but it's not one of the ones we like.\n        return false;\n    }\n    return true;\n}\nexports.satisfies = satisfies;\nfunction satisfies(version, range, options) {\n    try {\n        range = new Range(range, options);\n    } catch (er) {\n        return false;\n    }\n    return range.test(version);\n}\nexports.maxSatisfying = maxSatisfying;\nfunction maxSatisfying(versions, range, options) {\n    var max = null;\n    var maxSV = null;\n    try {\n        var rangeObj = new Range(range, options);\n    } catch (er) {\n        return null;\n    }\n    versions.forEach(function(v) {\n        if (rangeObj.test(v)) {\n            // satisfies(v, range, options)\n            if (!max || maxSV.compare(v) === -1) {\n                // compare(max, v, true)\n                max = v;\n                maxSV = new SemVer(max, options);\n            }\n        }\n    });\n    return max;\n}\nexports.minSatisfying = minSatisfying;\nfunction minSatisfying(versions, range, options) {\n    var min = null;\n    var minSV = null;\n    try {\n        var rangeObj = new Range(range, options);\n    } catch (er) {\n        return null;\n    }\n    versions.forEach(function(v) {\n        if (rangeObj.test(v)) {\n            // satisfies(v, range, options)\n            if (!min || minSV.compare(v) === 1) {\n                // compare(min, v, true)\n                min = v;\n                minSV = new SemVer(min, options);\n            }\n        }\n    });\n    return min;\n}\nexports.minVersion = minVersion;\nfunction minVersion(range, loose) {\n    range = new Range(range, loose);\n    var minver = new SemVer(\"0.0.0\");\n    if (range.test(minver)) {\n        return minver;\n    }\n    minver = new SemVer(\"0.0.0-0\");\n    if (range.test(minver)) {\n        return minver;\n    }\n    minver = null;\n    for(var i = 0; i < range.set.length; ++i){\n        var comparators = range.set[i];\n        comparators.forEach(function(comparator) {\n            // Clone to avoid manipulating the comparator's semver object.\n            var compver = new SemVer(comparator.semver.version);\n            switch(comparator.operator){\n                case \">\":\n                    if (compver.prerelease.length === 0) {\n                        compver.patch++;\n                    } else {\n                        compver.prerelease.push(0);\n                    }\n                    compver.raw = compver.format();\n                /* fallthrough */ case \"\":\n                case \">=\":\n                    if (!minver || gt(minver, compver)) {\n                        minver = compver;\n                    }\n                    break;\n                case \"<\":\n                case \"<=\":\n                    break;\n                /* istanbul ignore next */ default:\n                    throw new Error(\"Unexpected operation: \" + comparator.operator);\n            }\n        });\n    }\n    if (minver && range.test(minver)) {\n        return minver;\n    }\n    return null;\n}\nexports.validRange = validRange;\nfunction validRange(range, options) {\n    try {\n        // Return '*' instead of '' so that truthiness works.\n        // This will throw if it's invalid anyway\n        return new Range(range, options).range || \"*\";\n    } catch (er) {\n        return null;\n    }\n}\n// Determine if version is less than all the versions possible in the range\nexports.ltr = ltr;\nfunction ltr(version, range, options) {\n    return outside(version, range, \"<\", options);\n}\n// Determine if version is greater than all the versions possible in the range.\nexports.gtr = gtr;\nfunction gtr(version, range, options) {\n    return outside(version, range, \">\", options);\n}\nexports.outside = outside;\nfunction outside(version, range, hilo, options) {\n    version = new SemVer(version, options);\n    range = new Range(range, options);\n    var gtfn, ltefn, ltfn, comp, ecomp;\n    switch(hilo){\n        case \">\":\n            gtfn = gt;\n            ltefn = lte;\n            ltfn = lt;\n            comp = \">\";\n            ecomp = \">=\";\n            break;\n        case \"<\":\n            gtfn = lt;\n            ltefn = gte;\n            ltfn = gt;\n            comp = \"<\";\n            ecomp = \"<=\";\n            break;\n        default:\n            throw new TypeError('Must provide a hilo val of \"<\" or \">\"');\n    }\n    // If it satisifes the range it is not outside\n    if (satisfies(version, range, options)) {\n        return false;\n    }\n    // From now on, variable terms are as if we're in \"gtr\" mode.\n    // but note that everything is flipped for the \"ltr\" function.\n    for(var i = 0; i < range.set.length; ++i){\n        var comparators = range.set[i];\n        var high = null;\n        var low = null;\n        comparators.forEach(function(comparator) {\n            if (comparator.semver === ANY) {\n                comparator = new Comparator(\">=0.0.0\");\n            }\n            high = high || comparator;\n            low = low || comparator;\n            if (gtfn(comparator.semver, high.semver, options)) {\n                high = comparator;\n            } else if (ltfn(comparator.semver, low.semver, options)) {\n                low = comparator;\n            }\n        });\n        // If the edge version comparator has a operator then our version\n        // isn't outside it\n        if (high.operator === comp || high.operator === ecomp) {\n            return false;\n        }\n        // If the lowest version comparator has an operator and our version\n        // is less than it then it isn't higher than the range\n        if ((!low.operator || low.operator === comp) && ltefn(version, low.semver)) {\n            return false;\n        } else if (low.operator === ecomp && ltfn(version, low.semver)) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.prerelease = prerelease;\nfunction prerelease(version, options) {\n    var parsed = parse(version, options);\n    return parsed && parsed.prerelease.length ? parsed.prerelease : null;\n}\nexports.intersects = intersects;\nfunction intersects(r1, r2, options) {\n    r1 = new Range(r1, options);\n    r2 = new Range(r2, options);\n    return r1.intersects(r2);\n}\nexports.coerce = coerce;\nfunction coerce(version) {\n    if (version instanceof SemVer) {\n        return version;\n    }\n    if (typeof version !== \"string\") {\n        return null;\n    }\n    var match = version.match(safeRe[COERCE]);\n    if (match == null) {\n        return null;\n    }\n    return parse(match[1] + \".\" + (match[2] || \"0\") + \".\" + (match[3] || \"0\"));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/node_modules/semver/semver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonwebtoken/sign.js":
/*!*******************************************!*\
  !*** ./node_modules/jsonwebtoken/sign.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar timespan = __webpack_require__(/*! ./lib/timespan */ \"(ssr)/./node_modules/jsonwebtoken/lib/timespan.js\");\nvar PS_SUPPORTED = __webpack_require__(/*! ./lib/psSupported */ \"(ssr)/./node_modules/jsonwebtoken/lib/psSupported.js\");\nvar jws = __webpack_require__(/*! jws */ \"(ssr)/./node_modules/jws/index.js\");\nvar includes = __webpack_require__(/*! lodash.includes */ \"(ssr)/./node_modules/lodash.includes/index.js\");\nvar isBoolean = __webpack_require__(/*! lodash.isboolean */ \"(ssr)/./node_modules/lodash.isboolean/index.js\");\nvar isInteger = __webpack_require__(/*! lodash.isinteger */ \"(ssr)/./node_modules/lodash.isinteger/index.js\");\nvar isNumber = __webpack_require__(/*! lodash.isnumber */ \"(ssr)/./node_modules/lodash.isnumber/index.js\");\nvar isPlainObject = __webpack_require__(/*! lodash.isplainobject */ \"(ssr)/./node_modules/lodash.isplainobject/index.js\");\nvar isString = __webpack_require__(/*! lodash.isstring */ \"(ssr)/./node_modules/lodash.isstring/index.js\");\nvar once = __webpack_require__(/*! lodash.once */ \"(ssr)/./node_modules/lodash.once/index.js\");\nvar SUPPORTED_ALGS = [\n    \"RS256\",\n    \"RS384\",\n    \"RS512\",\n    \"ES256\",\n    \"ES384\",\n    \"ES512\",\n    \"HS256\",\n    \"HS384\",\n    \"HS512\",\n    \"none\"\n];\nif (PS_SUPPORTED) {\n    SUPPORTED_ALGS.splice(3, 0, \"PS256\", \"PS384\", \"PS512\");\n}\nvar sign_options_schema = {\n    expiresIn: {\n        isValid: function(value) {\n            return isInteger(value) || isString(value) && value;\n        },\n        message: '\"expiresIn\" should be a number of seconds or string representing a timespan'\n    },\n    notBefore: {\n        isValid: function(value) {\n            return isInteger(value) || isString(value) && value;\n        },\n        message: '\"notBefore\" should be a number of seconds or string representing a timespan'\n    },\n    audience: {\n        isValid: function(value) {\n            return isString(value) || Array.isArray(value);\n        },\n        message: '\"audience\" must be a string or array'\n    },\n    algorithm: {\n        isValid: includes.bind(null, SUPPORTED_ALGS),\n        message: '\"algorithm\" must be a valid string enum value'\n    },\n    header: {\n        isValid: isPlainObject,\n        message: '\"header\" must be an object'\n    },\n    encoding: {\n        isValid: isString,\n        message: '\"encoding\" must be a string'\n    },\n    issuer: {\n        isValid: isString,\n        message: '\"issuer\" must be a string'\n    },\n    subject: {\n        isValid: isString,\n        message: '\"subject\" must be a string'\n    },\n    jwtid: {\n        isValid: isString,\n        message: '\"jwtid\" must be a string'\n    },\n    noTimestamp: {\n        isValid: isBoolean,\n        message: '\"noTimestamp\" must be a boolean'\n    },\n    keyid: {\n        isValid: isString,\n        message: '\"keyid\" must be a string'\n    },\n    mutatePayload: {\n        isValid: isBoolean,\n        message: '\"mutatePayload\" must be a boolean'\n    }\n};\nvar registered_claims_schema = {\n    iat: {\n        isValid: isNumber,\n        message: '\"iat\" should be a number of seconds'\n    },\n    exp: {\n        isValid: isNumber,\n        message: '\"exp\" should be a number of seconds'\n    },\n    nbf: {\n        isValid: isNumber,\n        message: '\"nbf\" should be a number of seconds'\n    }\n};\nfunction validate(schema, allowUnknown, object, parameterName) {\n    if (!isPlainObject(object)) {\n        throw new Error('Expected \"' + parameterName + '\" to be a plain object.');\n    }\n    Object.keys(object).forEach(function(key) {\n        var validator = schema[key];\n        if (!validator) {\n            if (!allowUnknown) {\n                throw new Error('\"' + key + '\" is not allowed in \"' + parameterName + '\"');\n            }\n            return;\n        }\n        if (!validator.isValid(object[key])) {\n            throw new Error(validator.message);\n        }\n    });\n}\nfunction validateOptions(options) {\n    return validate(sign_options_schema, false, options, \"options\");\n}\nfunction validatePayload(payload) {\n    return validate(registered_claims_schema, true, payload, \"payload\");\n}\nvar options_to_payload = {\n    \"audience\": \"aud\",\n    \"issuer\": \"iss\",\n    \"subject\": \"sub\",\n    \"jwtid\": \"jti\"\n};\nvar options_for_objects = [\n    \"expiresIn\",\n    \"notBefore\",\n    \"noTimestamp\",\n    \"audience\",\n    \"issuer\",\n    \"subject\",\n    \"jwtid\"\n];\nmodule.exports = function(payload, secretOrPrivateKey, options, callback) {\n    if (typeof options === \"function\") {\n        callback = options;\n        options = {};\n    } else {\n        options = options || {};\n    }\n    var isObjectPayload = typeof payload === \"object\" && !Buffer.isBuffer(payload);\n    var header = Object.assign({\n        alg: options.algorithm || \"HS256\",\n        typ: isObjectPayload ? \"JWT\" : undefined,\n        kid: options.keyid\n    }, options.header);\n    function failure(err) {\n        if (callback) {\n            return callback(err);\n        }\n        throw err;\n    }\n    if (!secretOrPrivateKey && options.algorithm !== \"none\") {\n        return failure(new Error(\"secretOrPrivateKey must have a value\"));\n    }\n    if (typeof payload === \"undefined\") {\n        return failure(new Error(\"payload is required\"));\n    } else if (isObjectPayload) {\n        try {\n            validatePayload(payload);\n        } catch (error) {\n            return failure(error);\n        }\n        if (!options.mutatePayload) {\n            payload = Object.assign({}, payload);\n        }\n    } else {\n        var invalid_options = options_for_objects.filter(function(opt) {\n            return typeof options[opt] !== \"undefined\";\n        });\n        if (invalid_options.length > 0) {\n            return failure(new Error(\"invalid \" + invalid_options.join(\",\") + \" option for \" + typeof payload + \" payload\"));\n        }\n    }\n    if (typeof payload.exp !== \"undefined\" && typeof options.expiresIn !== \"undefined\") {\n        return failure(new Error('Bad \"options.expiresIn\" option the payload already has an \"exp\" property.'));\n    }\n    if (typeof payload.nbf !== \"undefined\" && typeof options.notBefore !== \"undefined\") {\n        return failure(new Error('Bad \"options.notBefore\" option the payload already has an \"nbf\" property.'));\n    }\n    try {\n        validateOptions(options);\n    } catch (error) {\n        return failure(error);\n    }\n    var timestamp = payload.iat || Math.floor(Date.now() / 1000);\n    if (options.noTimestamp) {\n        delete payload.iat;\n    } else if (isObjectPayload) {\n        payload.iat = timestamp;\n    }\n    if (typeof options.notBefore !== \"undefined\") {\n        try {\n            payload.nbf = timespan(options.notBefore, timestamp);\n        } catch (err) {\n            return failure(err);\n        }\n        if (typeof payload.nbf === \"undefined\") {\n            return failure(new Error('\"notBefore\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n        }\n    }\n    if (typeof options.expiresIn !== \"undefined\" && typeof payload === \"object\") {\n        try {\n            payload.exp = timespan(options.expiresIn, timestamp);\n        } catch (err) {\n            return failure(err);\n        }\n        if (typeof payload.exp === \"undefined\") {\n            return failure(new Error('\"expiresIn\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n        }\n    }\n    Object.keys(options_to_payload).forEach(function(key) {\n        var claim = options_to_payload[key];\n        if (typeof options[key] !== \"undefined\") {\n            if (typeof payload[claim] !== \"undefined\") {\n                return failure(new Error('Bad \"options.' + key + '\" option. The payload already has an \"' + claim + '\" property.'));\n            }\n            payload[claim] = options[key];\n        }\n    });\n    var encoding = options.encoding || \"utf8\";\n    if (typeof callback === \"function\") {\n        callback = callback && once(callback);\n        jws.createSign({\n            header: header,\n            privateKey: secretOrPrivateKey,\n            payload: payload,\n            encoding: encoding\n        }).once(\"error\", callback).once(\"done\", function(signature) {\n            callback(null, signature);\n        });\n    } else {\n        return jws.sign({\n            header: header,\n            payload: payload,\n            secret: secretOrPrivateKey,\n            encoding: encoding\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/sign.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonwebtoken/verify.js":
/*!*********************************************!*\
  !*** ./node_modules/jsonwebtoken/verify.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar JsonWebTokenError = __webpack_require__(/*! ./lib/JsonWebTokenError */ \"(ssr)/./node_modules/jsonwebtoken/lib/JsonWebTokenError.js\");\nvar NotBeforeError = __webpack_require__(/*! ./lib/NotBeforeError */ \"(ssr)/./node_modules/jsonwebtoken/lib/NotBeforeError.js\");\nvar TokenExpiredError = __webpack_require__(/*! ./lib/TokenExpiredError */ \"(ssr)/./node_modules/jsonwebtoken/lib/TokenExpiredError.js\");\nvar decode = __webpack_require__(/*! ./decode */ \"(ssr)/./node_modules/jsonwebtoken/decode.js\");\nvar timespan = __webpack_require__(/*! ./lib/timespan */ \"(ssr)/./node_modules/jsonwebtoken/lib/timespan.js\");\nvar PS_SUPPORTED = __webpack_require__(/*! ./lib/psSupported */ \"(ssr)/./node_modules/jsonwebtoken/lib/psSupported.js\");\nvar jws = __webpack_require__(/*! jws */ \"(ssr)/./node_modules/jws/index.js\");\nvar PUB_KEY_ALGS = [\n    \"RS256\",\n    \"RS384\",\n    \"RS512\",\n    \"ES256\",\n    \"ES384\",\n    \"ES512\"\n];\nvar RSA_KEY_ALGS = [\n    \"RS256\",\n    \"RS384\",\n    \"RS512\"\n];\nvar HS_ALGS = [\n    \"HS256\",\n    \"HS384\",\n    \"HS512\"\n];\nif (PS_SUPPORTED) {\n    PUB_KEY_ALGS.splice(3, 0, \"PS256\", \"PS384\", \"PS512\");\n    RSA_KEY_ALGS.splice(3, 0, \"PS256\", \"PS384\", \"PS512\");\n}\nmodule.exports = function(jwtString, secretOrPublicKey, options, callback) {\n    if (typeof options === \"function\" && !callback) {\n        callback = options;\n        options = {};\n    }\n    if (!options) {\n        options = {};\n    }\n    //clone this object since we are going to mutate it.\n    options = Object.assign({}, options);\n    var done;\n    if (callback) {\n        done = callback;\n    } else {\n        done = function(err, data) {\n            if (err) throw err;\n            return data;\n        };\n    }\n    if (options.clockTimestamp && typeof options.clockTimestamp !== \"number\") {\n        return done(new JsonWebTokenError(\"clockTimestamp must be a number\"));\n    }\n    if (options.nonce !== undefined && (typeof options.nonce !== \"string\" || options.nonce.trim() === \"\")) {\n        return done(new JsonWebTokenError(\"nonce must be a non-empty string\"));\n    }\n    var clockTimestamp = options.clockTimestamp || Math.floor(Date.now() / 1000);\n    if (!jwtString) {\n        return done(new JsonWebTokenError(\"jwt must be provided\"));\n    }\n    if (typeof jwtString !== \"string\") {\n        return done(new JsonWebTokenError(\"jwt must be a string\"));\n    }\n    var parts = jwtString.split(\".\");\n    if (parts.length !== 3) {\n        return done(new JsonWebTokenError(\"jwt malformed\"));\n    }\n    var decodedToken;\n    try {\n        decodedToken = decode(jwtString, {\n            complete: true\n        });\n    } catch (err) {\n        return done(err);\n    }\n    if (!decodedToken) {\n        return done(new JsonWebTokenError(\"invalid token\"));\n    }\n    var header = decodedToken.header;\n    var getSecret;\n    if (typeof secretOrPublicKey === \"function\") {\n        if (!callback) {\n            return done(new JsonWebTokenError(\"verify must be called asynchronous if secret or public key is provided as a callback\"));\n        }\n        getSecret = secretOrPublicKey;\n    } else {\n        getSecret = function(header, secretCallback) {\n            return secretCallback(null, secretOrPublicKey);\n        };\n    }\n    return getSecret(header, function(err, secretOrPublicKey) {\n        if (err) {\n            return done(new JsonWebTokenError(\"error in secret or public key callback: \" + err.message));\n        }\n        var hasSignature = parts[2].trim() !== \"\";\n        if (!hasSignature && secretOrPublicKey) {\n            return done(new JsonWebTokenError(\"jwt signature is required\"));\n        }\n        if (hasSignature && !secretOrPublicKey) {\n            return done(new JsonWebTokenError(\"secret or public key must be provided\"));\n        }\n        if (!hasSignature && !options.algorithms) {\n            options.algorithms = [\n                \"none\"\n            ];\n        }\n        if (!options.algorithms) {\n            options.algorithms = ~secretOrPublicKey.toString().indexOf(\"BEGIN CERTIFICATE\") || ~secretOrPublicKey.toString().indexOf(\"BEGIN PUBLIC KEY\") ? PUB_KEY_ALGS : ~secretOrPublicKey.toString().indexOf(\"BEGIN RSA PUBLIC KEY\") ? RSA_KEY_ALGS : HS_ALGS;\n        }\n        if (!~options.algorithms.indexOf(decodedToken.header.alg)) {\n            return done(new JsonWebTokenError(\"invalid algorithm\"));\n        }\n        var valid;\n        try {\n            valid = jws.verify(jwtString, decodedToken.header.alg, secretOrPublicKey);\n        } catch (e) {\n            return done(e);\n        }\n        if (!valid) {\n            return done(new JsonWebTokenError(\"invalid signature\"));\n        }\n        var payload = decodedToken.payload;\n        if (typeof payload.nbf !== \"undefined\" && !options.ignoreNotBefore) {\n            if (typeof payload.nbf !== \"number\") {\n                return done(new JsonWebTokenError(\"invalid nbf value\"));\n            }\n            if (payload.nbf > clockTimestamp + (options.clockTolerance || 0)) {\n                return done(new NotBeforeError(\"jwt not active\", new Date(payload.nbf * 1000)));\n            }\n        }\n        if (typeof payload.exp !== \"undefined\" && !options.ignoreExpiration) {\n            if (typeof payload.exp !== \"number\") {\n                return done(new JsonWebTokenError(\"invalid exp value\"));\n            }\n            if (clockTimestamp >= payload.exp + (options.clockTolerance || 0)) {\n                return done(new TokenExpiredError(\"jwt expired\", new Date(payload.exp * 1000)));\n            }\n        }\n        if (options.audience) {\n            var audiences = Array.isArray(options.audience) ? options.audience : [\n                options.audience\n            ];\n            var target = Array.isArray(payload.aud) ? payload.aud : [\n                payload.aud\n            ];\n            var match = target.some(function(targetAudience) {\n                return audiences.some(function(audience) {\n                    return audience instanceof RegExp ? audience.test(targetAudience) : audience === targetAudience;\n                });\n            });\n            if (!match) {\n                return done(new JsonWebTokenError(\"jwt audience invalid. expected: \" + audiences.join(\" or \")));\n            }\n        }\n        if (options.issuer) {\n            var invalid_issuer = typeof options.issuer === \"string\" && payload.iss !== options.issuer || Array.isArray(options.issuer) && options.issuer.indexOf(payload.iss) === -1;\n            if (invalid_issuer) {\n                return done(new JsonWebTokenError(\"jwt issuer invalid. expected: \" + options.issuer));\n            }\n        }\n        if (options.subject) {\n            if (payload.sub !== options.subject) {\n                return done(new JsonWebTokenError(\"jwt subject invalid. expected: \" + options.subject));\n            }\n        }\n        if (options.jwtid) {\n            if (payload.jti !== options.jwtid) {\n                return done(new JsonWebTokenError(\"jwt jwtid invalid. expected: \" + options.jwtid));\n            }\n        }\n        if (options.nonce) {\n            if (payload.nonce !== options.nonce) {\n                return done(new JsonWebTokenError(\"jwt nonce invalid. expected: \" + options.nonce));\n            }\n        }\n        if (options.maxAge) {\n            if (typeof payload.iat !== \"number\") {\n                return done(new JsonWebTokenError(\"iat required when maxAge is specified\"));\n            }\n            var maxAgeTimestamp = timespan(options.maxAge, payload.iat);\n            if (typeof maxAgeTimestamp === \"undefined\") {\n                return done(new JsonWebTokenError('\"maxAge\" should be a number of seconds or string representing a timespan eg: \"1d\", \"20h\", 60'));\n            }\n            if (clockTimestamp >= maxAgeTimestamp + (options.clockTolerance || 0)) {\n                return done(new TokenExpiredError(\"maxAge exceeded\", new Date(maxAgeTimestamp * 1000)));\n            }\n        }\n        if (options.complete === true) {\n            var signature = decodedToken.signature;\n            return done(null, {\n                header: header,\n                payload: payload,\n                signature: signature\n            });\n        }\n        return done(null, payload);\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbndlYnRva2VuL3ZlcmlmeS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsSUFBSUEsb0JBQW9CQyxtQkFBT0EsQ0FBQztBQUNoQyxJQUFJQyxpQkFBb0JELG1CQUFPQSxDQUFDO0FBQ2hDLElBQUlFLG9CQUFvQkYsbUJBQU9BLENBQUM7QUFDaEMsSUFBSUcsU0FBb0JILG1CQUFPQSxDQUFDO0FBQ2hDLElBQUlJLFdBQW9CSixtQkFBT0EsQ0FBQztBQUNoQyxJQUFJSyxlQUFvQkwsbUJBQU9BLENBQUM7QUFDaEMsSUFBSU0sTUFBb0JOLG1CQUFPQSxDQUFDO0FBRWhDLElBQUlPLGVBQWU7SUFBQztJQUFTO0lBQVM7SUFBUztJQUFTO0lBQVM7Q0FBUTtBQUN6RSxJQUFJQyxlQUFlO0lBQUM7SUFBUztJQUFTO0NBQVE7QUFDOUMsSUFBSUMsVUFBVTtJQUFDO0lBQVM7SUFBUztDQUFRO0FBRXpDLElBQUlKLGNBQWM7SUFDaEJFLGFBQWFHLE1BQU0sQ0FBQyxHQUFHLEdBQUcsU0FBUyxTQUFTO0lBQzVDRixhQUFhRSxNQUFNLENBQUMsR0FBRyxHQUFHLFNBQVMsU0FBUztBQUM5QztBQUVBQyxPQUFPQyxPQUFPLEdBQUcsU0FBVUMsU0FBUyxFQUFFQyxpQkFBaUIsRUFBRUMsT0FBTyxFQUFFQyxRQUFRO0lBQ3hFLElBQUksT0FBUUQsWUFBWSxjQUFlLENBQUNDLFVBQVU7UUFDaERBLFdBQVdEO1FBQ1hBLFVBQVUsQ0FBQztJQUNiO0lBRUEsSUFBSSxDQUFDQSxTQUFTO1FBQ1pBLFVBQVUsQ0FBQztJQUNiO0lBRUEsb0RBQW9EO0lBQ3BEQSxVQUFVRSxPQUFPQyxNQUFNLENBQUMsQ0FBQyxHQUFHSDtJQUU1QixJQUFJSTtJQUVKLElBQUlILFVBQVU7UUFDWkcsT0FBT0g7SUFDVCxPQUFPO1FBQ0xHLE9BQU8sU0FBU0MsR0FBRyxFQUFFQyxJQUFJO1lBQ3ZCLElBQUlELEtBQUssTUFBTUE7WUFDZixPQUFPQztRQUNUO0lBQ0Y7SUFFQSxJ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QUVBLElBQUlSLFFBQVF5RCxNQUFNLEVBQUU7WUFDbEIsSUFBSSxPQUFPekIsUUFBUTBCLEdBQUcsS0FBSyxVQUFVO2dCQUNuQyxPQUFPdEQsS0FBSyxJQUFJcEIsa0JBQWtCO1lBQ3BDO1lBRUEsSUFBSTJFLGtCQUFrQnRFLFNBQVNXLFFBQVF5RCxNQUFNLEVBQUV6QixRQUFRMEIsR0FBRztZQUMxRCxJQUFJLE9BQU9DLG9CQUFvQixhQUFhO2dCQUMxQyxPQUFPdkQsS0FBSyxJQUFJcEIsa0JBQWtCO1lBQ3BDO1lBQ0EsSUFBSXVCLGtCQUFrQm9ELGtCQUFtQjNELENBQUFBLFFBQVFtQyxjQUFjLElBQUksSUFBSTtnQkFDckUsT0FBTy9CLEtBQUssSUFBSWpCLGtCQUFrQixtQkFBbUIsSUFBSTBCLEtBQUs4QyxrQkFBa0I7WUFDbEY7UUFDRjtRQUVBLElBQUkzRCxRQUFRbUIsUUFBUSxLQUFLLE1BQU07WUFDN0IsSUFBSXlDLFlBQVkxQyxhQUFhMEMsU0FBUztZQUV0QyxPQUFPeEQsS0FBSyxNQUFNO2dCQUNoQmdCLFFBQVFBO2dCQUNSWSxTQUFTQTtnQkFDVDRCLFdBQVdBO1lBQ2I7UUFDRjtRQUVBLE9BQU94RCxLQUFLLE1BQU00QjtJQUNwQjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vY29uc3RydWN0aW9uLW1hbmFnZW1lbnQtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2pzb253ZWJ0b2tlbi92ZXJpZnkuanM/OWQ4OCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgSnNvbldlYlRva2VuRXJyb3IgPSByZXF1aXJlKCcuL2xpYi9Kc29uV2ViVG9rZW5FcnJvcicpO1xudmFyIE5vdEJlZm9yZUVycm9yICAgID0gcmVxdWlyZSgnLi9saWIvTm90QmVmb3JlRXJyb3InKTtcbnZhciBUb2tlbkV4cGlyZWRFcnJvciA9IHJlcXVpcmUoJy4vbGliL1Rva2VuRXhwaXJlZEVycm9yJyk7XG52YXIgZGVjb2RlICAgICAgICAgICAgPSByZXF1aXJlKCcuL2RlY29kZScpO1xudmFyIHRpbWVzcGFuICAgICAgICAgID0gcmVxdWlyZSgnLi9saWIvdGltZXNwYW4nKTtcbnZhciBQU19TVVBQT1JURUQgICAgICA9IHJlcXVpcmUoJy4vbGliL3BzU3VwcG9ydGVkJyk7XG52YXIgandzICAgICAgICAgICAgICAgPSByZXF1aXJlKCdqd3MnKTtcblxudmFyIFBVQl9LRVlfQUxHUyA9IFsnUlMyNTYnLCAnUlMzODQnLCAnUlM1MTInLCAnRVMyNTYnLCAnRVMzODQnLCAnRVM1MTInXTtcbnZhciBSU0FfS0VZX0FMR1MgPSBbJ1JTMjU2JywgJ1JTMzg0JywgJ1JTNTEyJ107XG52YXIgSFNfQUxHUyA9IFsnSFMyNTYnLCAnSFMzODQnLCAnSFM1MTInXTtcblxuaWYgKFBTX1NVUFBPUlRFRCkge1xuICBQVUJfS0VZX0FMR1Muc3BsaWNlKDMsIDAsICdQUzI1NicsICdQUzM4NCcsICdQUzUxMicpO1xuICBSU0FfS0VZX0FMR1Muc3BsaWNlKDMsIDAsICdQUzI1NicsICdQUzM4NCcsICdQUzUxMicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChqd3RTdHJpbmcsIHNlY3JldE9yUHVibGljS2V5LCBvcHRpb25zLCBjYWxsYmFjaykge1xuICBpZiAoKHR5cGVvZiBvcHRpb25zID09PSAnZnVuY3Rpb24nKSAmJiAhY2FsbGJhY2spIHtcbiAgICBjYWxsYmFjayA9IG9wdGlvbnM7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgLy9jbG9uZSB0aGlzIG9iamVjdCBzaW5jZSB3ZSBhcmUgZ29pbmcgdG8gbXV0YXRlIGl0LlxuICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyk7XG5cbiAgdmFyIGRvbmU7XG5cbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZG9uZSA9IGNhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIGRvbmUgPSBmdW5jdGlvbihlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIpIHRocm93IGVycjtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH07XG4gIH1cblxuICBpZiAob3B0aW9ucy5jbG9ja1RpbWVzdGFtcCAmJiB0eXBlb2Ygb3B0aW9ucy5jbG9ja1RpbWVzdGFtcCAhPT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2Nsb2NrVGltZXN0YW1wIG11c3QgYmUgYSBudW1iZXInKSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5ub25jZSAhPT0gdW5kZWZpbmVkICYmICh0eXBlb2Ygb3B0aW9ucy5ub25jZSAhPT0gJ3N0cmluZycgfHwgb3B0aW9ucy5ub25jZS50cmltKCkgPT09ICcnKSkge1xuICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignbm9uY2UgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKSk7XG4gIH1cblxuICB2YXIgY2xvY2tUaW1lc3RhbXAgPSBvcHRpb25zLmNsb2NrVGltZXN0YW1wIHx8IE1hdGguZmxvb3IoRGF0ZS5ub3coKSAvIDEwMDApO1xuXG4gIGlmICghand0U3RyaW5nKXtcbiAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2p3dCBtdXN0IGJlIHByb3ZpZGVkJykpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBqd3RTdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3QgbXVzdCBiZSBhIHN0cmluZycpKTtcbiAgfVxuXG4gIHZhciBwYXJ0cyA9IGp3dFN0cmluZy5zcGxpdCgnLicpO1xuXG4gIGlmIChwYXJ0cy5sZW5ndGggIT09IDMpe1xuICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignand0IG1hbGZvcm1lZCcpKTtcbiAgfVxuXG4gIHZhciBkZWNvZGVkVG9rZW47XG5cbiAgdHJ5IHtcbiAgICBkZWNvZGVkVG9rZW4gPSBkZWNvZGUoand0U3RyaW5nLCB7IGNvbXBsZXRlOiB0cnVlIH0pO1xuICB9IGNhdGNoKGVycikge1xuICAgIHJldHVybiBkb25lKGVycik7XG4gIH1cblxuICBpZiAoIWRlY29kZWRUb2tlbikge1xuICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignaW52YWxpZCB0b2tlbicpKTtcbiAgfVxuXG4gIHZhciBoZWFkZXIgPSBkZWNvZGVkVG9rZW4uaGVhZGVyO1xuICB2YXIgZ2V0U2VjcmV0O1xuXG4gIGlmKHR5cGVvZiBzZWNyZXRPclB1YmxpY0tleSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGlmKCFjYWxsYmFjaykge1xuICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCd2ZXJpZnkgbXVzdCBiZSBjYWxsZWQgYXN5bmNocm9ub3VzIGlmIHNlY3JldCBvciBwdWJsaWMga2V5IGlzIHByb3ZpZGVkIGFzIGEgY2FsbGJhY2snKSk7XG4gICAgfVxuXG4gICAgZ2V0U2VjcmV0ID0gc2VjcmV0T3JQdWJsaWNLZXk7XG4gIH1cbiAgZWxzZSB7XG4gICAgZ2V0U2VjcmV0ID0gZnVuY3Rpb24oaGVhZGVyLCBzZWNyZXRDYWxsYmFjaykge1xuICAgICAgcmV0dXJuIHNlY3JldENhbGxiYWNrKG51bGwsIHNlY3JldE9yUHVibGljS2V5KTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIGdldFNlY3JldChoZWFkZXIsIGZ1bmN0aW9uKGVyciwgc2VjcmV0T3JQdWJsaWNLZXkpIHtcbiAgICBpZihlcnIpIHtcbiAgICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignZXJyb3IgaW4gc2VjcmV0IG9yIHB1YmxpYyBrZXkgY2FsbGJhY2s6ICcgKyBlcnIubWVzc2FnZSkpO1xuICAgIH1cblxuICAgIHZhciBoYXNTaWduYXR1cmUgPSBwYXJ0c1syXS50cmltKCkgIT09ICcnO1xuXG4gICAgaWYgKCFoYXNTaWduYXR1cmUgJiYgc2VjcmV0T3JQdWJsaWNLZXkpe1xuICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3Qgc2lnbmF0dXJlIGlzIHJlcXVpcmVkJykpO1xuICAgIH1cblxuICAgIGlmIChoYXNTaWduYXR1cmUgJiYgIXNlY3JldE9yUHVibGljS2V5KSB7XG4gICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ3NlY3JldCBvciBwdWJsaWMga2V5IG11c3QgYmUgcHJvdmlkZWQnKSk7XG4gICAgfVxuXG4gICAgaWYgKCFoYXNTaWduYXR1cmUgJiYgIW9wdGlvbnMuYWxnb3JpdGhtcykge1xuICAgICAgb3B0aW9ucy5hbGdvcml0aG1zID0gWydub25lJ107XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zLmFsZ29yaXRobXMpIHtcbiAgICAgIG9wdGlvbnMuYWxnb3JpdGhtcyA9IH5zZWNyZXRPclB1YmxpY0tleS50b1N0cmluZygpLmluZGV4T2YoJ0JFR0lOIENFUlRJRklDQVRFJykgfHxcbiAgICAgICAgfnNlY3JldE9yUHVibGljS2V5LnRvU3RyaW5nKCkuaW5kZXhPZignQkVHSU4gUFVCTElDIEtFWScpID8gUFVCX0tFWV9BTEdTIDpcbiAgICAgICAgfnNlY3JldE9yUHVibGljS2V5LnRvU3RyaW5nKCkuaW5kZXhPZignQkVHSU4gUlNBIFBVQkxJQyBLRVknKSA/IFJTQV9LRVlfQUxHUyA6IEhTX0FMR1M7XG5cbiAgICB9XG5cbiAgICBpZiAoIX5vcHRpb25zLmFsZ29yaXRobXMuaW5kZXhPZihkZWNvZGVkVG9rZW4uaGVhZGVyLmFsZykpIHtcbiAgICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignaW52YWxpZCBhbGdvcml0aG0nKSk7XG4gICAgfVxuXG4gICAgdmFyIHZhbGlkO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhbGlkID0gandzLnZlcmlmeShqd3RTdHJpbmcsIGRlY29kZWRUb2tlbi5oZWFkZXIuYWxnLCBzZWNyZXRPclB1YmxpY0tleSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGRvbmUoZSk7XG4gICAgfVxuXG4gICAgaWYgKCF2YWxpZCkge1xuICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdpbnZhbGlkIHNpZ25hdHVyZScpKTtcbiAgICB9XG5cbiAgICB2YXIgcGF5bG9hZCA9IGRlY29kZWRUb2tlbi5wYXlsb2FkO1xuXG4gICAgaWYgKHR5cGVvZiBwYXlsb2FkLm5iZiAhPT0gJ3VuZGVmaW5lZCcgJiYgIW9wdGlvbnMuaWdub3JlTm90QmVmb3JlKSB7XG4gICAgICBpZiAodHlwZW9mIHBheWxvYWQubmJmICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2ludmFsaWQgbmJmIHZhbHVlJykpO1xuICAgICAgfVxuICAgICAgaWYgKHBheWxvYWQubmJmID4gY2xvY2tUaW1lc3RhbXAgKyAob3B0aW9ucy5jbG9ja1RvbGVyYW5jZSB8fCAwKSkge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgTm90QmVmb3JlRXJyb3IoJ2p3dCBub3QgYWN0aXZlJywgbmV3IERhdGUocGF5bG9hZC5uYmYgKiAxMDAwKSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgcGF5bG9hZC5leHAgIT09ICd1bmRlZmluZWQnICYmICFvcHRpb25zLmlnbm9yZUV4cGlyYXRpb24pIHtcbiAgICAgIGlmICh0eXBlb2YgcGF5bG9hZC5leHAgIT09ICdudW1iZXInKSB7XG4gICAgICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignaW52YWxpZCBleHAgdmFsdWUnKSk7XG4gICAgICB9XG4gICAgICBpZiAoY2xvY2tUaW1lc3RhbXAgPj0gcGF5bG9hZC5leHAgKyAob3B0aW9ucy5jbG9ja1RvbGVyYW5jZSB8fCAwKSkge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgVG9rZW5FeHBpcmVkRXJyb3IoJ2p3dCBleHBpcmVkJywgbmV3IERhdGUocGF5bG9hZC5leHAgKiAxMDAwKSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmF1ZGllbmNlKSB7XG4gICAgICB2YXIgYXVkaWVuY2VzID0gQXJyYXkuaXNBcnJheShvcHRpb25zLmF1ZGllbmNlKSA/IG9wdGlvbnMuYXVkaWVuY2UgOiBbb3B0aW9ucy5hdWRpZW5jZV07XG4gICAgICB2YXIgdGFyZ2V0ID0gQXJyYXkuaXNBcnJheShwYXlsb2FkLmF1ZCkgPyBwYXlsb2FkLmF1ZCA6IFtwYXlsb2FkLmF1ZF07XG5cbiAgICAgIHZhciBtYXRjaCA9IHRhcmdldC5zb21lKGZ1bmN0aW9uICh0YXJnZXRBdWRpZW5jZSkge1xuICAgICAgICByZXR1cm4gYXVkaWVuY2VzLnNvbWUoZnVuY3Rpb24gKGF1ZGllbmNlKSB7XG4gICAgICAgICAgcmV0dXJuIGF1ZGllbmNlIGluc3RhbmNlb2YgUmVnRXhwID8gYXVkaWVuY2UudGVzdCh0YXJnZXRBdWRpZW5jZSkgOiBhdWRpZW5jZSA9PT0gdGFyZ2V0QXVkaWVuY2U7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3QgYXVkaWVuY2UgaW52YWxpZC4gZXhwZWN0ZWQ6ICcgKyBhdWRpZW5jZXMuam9pbignIG9yICcpKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuaXNzdWVyKSB7XG4gICAgICB2YXIgaW52YWxpZF9pc3N1ZXIgPVxuICAgICAgICAgICAgICAodHlwZW9mIG9wdGlvbnMuaXNzdWVyID09PSAnc3RyaW5nJyAmJiBwYXlsb2FkLmlzcyAhPT0gb3B0aW9ucy5pc3N1ZXIpIHx8XG4gICAgICAgICAgICAgIChBcnJheS5pc0FycmF5KG9wdGlvbnMuaXNzdWVyKSAmJiBvcHRpb25zLmlzc3Vlci5pbmRleE9mKHBheWxvYWQuaXNzKSA9PT0gLTEpO1xuXG4gICAgICBpZiAoaW52YWxpZF9pc3N1ZXIpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3QgaXNzdWVyIGludmFsaWQuIGV4cGVjdGVkOiAnICsgb3B0aW9ucy5pc3N1ZXIpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zdWJqZWN0KSB7XG4gICAgICBpZiAocGF5bG9hZC5zdWIgIT09IG9wdGlvbnMuc3ViamVjdCkge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2p3dCBzdWJqZWN0IGludmFsaWQuIGV4cGVjdGVkOiAnICsgb3B0aW9ucy5zdWJqZWN0KSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMuand0aWQpIHtcbiAgICAgIGlmIChwYXlsb2FkLmp0aSAhPT0gb3B0aW9ucy5qd3RpZCkge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2p3dCBqd3RpZCBpbnZhbGlkLiBleHBlY3RlZDogJyArIG9wdGlvbnMuand0aWQpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5ub25jZSkge1xuICAgICAgaWYgKHBheWxvYWQubm9uY2UgIT09IG9wdGlvbnMubm9uY2UpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUobmV3IEpzb25XZWJUb2tlbkVycm9yKCdqd3Qgbm9uY2UgaW52YWxpZC4gZXhwZWN0ZWQ6ICcgKyBvcHRpb25zLm5vbmNlKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubWF4QWdlKSB7XG4gICAgICBpZiAodHlwZW9mIHBheWxvYWQuaWF0ICE9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gZG9uZShuZXcgSnNvbldlYlRva2VuRXJyb3IoJ2lhdCByZXF1aXJlZCB3aGVuIG1heEFnZSBpcyBzcGVjaWZpZWQnKSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBtYXhBZ2VUaW1lc3RhbXAgPSB0aW1lc3BhbihvcHRpb25zLm1heEFnZSwgcGF5bG9hZC5pYXQpO1xuICAgICAgaWYgKHR5cGVvZiBtYXhBZ2VUaW1lc3RhbXAgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiBkb25lKG5ldyBKc29uV2ViVG9rZW5FcnJvcignXCJtYXhBZ2VcIiBzaG91bGQgYmUgYSBudW1iZXIgb2Ygc2Vjb25kcyBvciBzdHJpbmcgcmVwcmVzZW50aW5nIGEgdGltZXNwYW4gZWc6IFwiMWRcIiwgXCIyMGhcIiwgNjAnKSk7XG4gICAgICB9XG4gICAgICBpZiAoY2xvY2tUaW1lc3RhbXAgPj0gbWF4QWdlVGltZXN0YW1wICsgKG9wdGlvbnMuY2xvY2tUb2xlcmFuY2UgfHwgMCkpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUobmV3IFRva2VuRXhwaXJlZEVycm9yKCdtYXhBZ2UgZXhjZWVkZWQnLCBuZXcgRGF0ZShtYXhBZ2VUaW1lc3RhbXAgKiAxMDAwKSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChvcHRpb25zLmNvbXBsZXRlID09PSB0cnVlKSB7XG4gICAgICB2YXIgc2lnbmF0dXJlID0gZGVjb2RlZFRva2VuLnNpZ25hdHVyZTtcblxuICAgICAgcmV0dXJuIGRvbmUobnVsbCwge1xuICAgICAgICBoZWFkZXI6IGhlYWRlcixcbiAgICAgICAgcGF5bG9hZDogcGF5bG9hZCxcbiAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmVcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBkb25lKG51bGwsIHBheWxvYWQpO1xuICB9KTtcbn07XG4iXSwibmFtZXMiOlsiSnNvbldlYlRva2VuRXJyb3IiLCJyZXF1aXJlIiwiTm90QmVmb3JlRXJyb3IiLCJUb2tlbkV4cGlyZWRFcnJvciIsImRlY29kZSIsInRpbWVzcGFuIiwiUFNfU1VQUE9SVEVEIiwiandzIiwiUFVCX0tFWV9BTEdTIiwiUlNBX0tFWV9BTEdTIiwiSFNfQUxHUyIsInNwbGljZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJqd3RTdHJpbmciLCJzZWNyZXRPclB1YmxpY0tleSIsIm9wdGlvbnMiLCJjYWxsYmFjayIsIk9iamVjdCIsImFzc2lnbiIsImRvbmUiLCJlcnIiLCJkYXRhIiwiY2xvY2tUaW1lc3RhbXAiLCJub25jZSIsInVuZGVmaW5lZCIsInRyaW0iLCJNYXRoIiwiZmxvb3IiLCJEYXRlIiwibm93IiwicGFydHMiLCJzcGxpdCIsImxlbmd0aCIsImRlY29kZWRUb2tlbiIsImNvbXBsZXRlIiwiaGVhZGVyIiwiZ2V0U2VjcmV0Iiwic2VjcmV0Q2FsbGJhY2siLCJtZXNzYWdlIiwiaGFzU2lnbmF0dXJlIiwiYWxnb3JpdGhtcyIsInRvU3RyaW5nIiwiaW5kZXhPZiIsImFsZyIsInZhbGlkIiwidmVyaWZ5IiwiZSIsInBheWxvYWQiLCJuYmYiLCJpZ25vcmVOb3RCZWZvcmUiLCJjbG9ja1RvbGVyYW5jZSIsImV4cCIsImlnbm9yZUV4cGlyYXRpb24iLCJhdWRpZW5jZSIsImF1ZGllbmNlcyIsIkFycmF5IiwiaXNBcnJheSIsInRhcmdldCIsImF1ZCIsIm1hdGNoIiwic29tZSIsInRhcmdldEF1ZGllbmNlIiwiUmVnRXhwIiwidGVzdCIsImpvaW4iLCJpc3N1ZXIiLCJpbnZhbGlkX2lzc3VlciIsImlzcyIsInN1YmplY3QiLCJzdWIiLCJqd3RpZCIsImp0aSIsIm1heEFnZSIsImlhdCIsIm1heEFnZVRpbWVzdGFtcCIsInNpZ25hdHVyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonwebtoken/verify.js\n");

/***/ })

};
;